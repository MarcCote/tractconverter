/* -*- c -*- */
#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "datetime.h"
#include "structmember.h"

#define _MULTIARRAYMODULE
#define NPY_NO_PREFIX
#include "numpy/arrayobject.h"
#include "numpy/arrayscalars.h"

#include "numpy/npy_3kcompat.h"

#include "numpy/npy_math.h"
#include "numpy/halffloat.h"

#include "common.h"
#include "ctors.h"
#include "usertypes.h"
#include "npy_config.h"
#include "_datetime.h"

#include "numpyos.h"


/*
 *****************************************************************************
 **                        PYTHON TYPES TO C TYPES                          **
 *****************************************************************************
 */

static double
MyPyFloat_AsDouble(PyObject *obj)
{
    double ret = 0;
    PyObject *num;

    if (obj == Py_None) {
        return NPY_NAN;
    }
    num = PyNumber_Float(obj);
    if (num == NULL) {
        return NPY_NAN;
    }
    ret = PyFloat_AsDouble(num);
    Py_DECREF(num);
    return ret;
}

static npy_half
MyPyFloat_AsHalf(PyObject *obj)
{
    return npy_double_to_half(MyPyFloat_AsDouble(obj));
}

static PyObject *
MyPyFloat_FromHalf(npy_half h)
{
    return PyFloat_FromDouble(npy_half_to_double(h));
}


/**begin repeat
 * #type = long, longlong#
 * #Type = Long, LongLong#
 */
static @type@
MyPyLong_As@Type@ (PyObject *obj)
{
    @type@ ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_As@Type@(num);
    Py_DECREF(num);
    return ret;
}

static u@type@
MyPyLong_AsUnsigned@Type@ (PyObject *obj)
{
    u@type@ ret;
    PyObject *num = PyNumber_Long(obj);

    if (num == NULL) {
        return -1;
    }
    ret = PyLong_AsUnsigned@Type@(num);
    if (PyErr_Occurred()) {
        PyErr_Clear();
        ret = PyLong_As@Type@(num);
    }
    Py_DECREF(num);
    return ret;
}

/**end repeat**/


/*
 *****************************************************************************
 **                         GETITEM AND SETITEM                             **
 *****************************************************************************
 */


static char * _SEQUENCE_MESSAGE = "error setting an array element with a sequence";

/**begin repeat
 *
 * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, LONG, UINT, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE#
 * #func1 = PyBool_FromLong, PyInt_FromLong*6, PyLong_FromUnsignedLong*2,
 *          PyLong_FromLongLong, PyLong_FromUnsignedLongLong,
 *          MyPyFloat_FromHalf, PyFloat_FromDouble*2#
 * #func2 = PyObject_IsTrue, MyPyLong_AsLong*6, MyPyLong_AsUnsignedLong*2,
 *          MyPyLong_AsLongLong, MyPyLong_AsUnsignedLongLong,
 *          MyPyFloat_AsHalf, MyPyFloat_AsDouble*2#
 * #type = Bool, byte, ubyte, short, ushort, int, long, uint, ulong,
 *         longlong, ulonglong, npy_half, float, double#
 * #type1 = long*7, ulong*2, longlong, ulonglong, npy_half, float, double#
 * #kind = Bool, Byte, UByte, Short, UShort, Int, Long, UInt, ULong,
 *         LongLong, ULongLong, Half, Float, Double#
*/
static PyObject *
@TYPE@_getitem(char *ip, PyArrayObject *ap) {
    @type@ t1;

    if ((ap == NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((@type@ *)ip);
        return @func1@((@type1@)t1);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap), ap);
        return @func1@((@type1@)t1);
    }
}

static int
@TYPE@_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    @type@ temp;  /* ensures alignment */

    if (PyArray_IsScalar(op, @kind@)) {
        temp = ((Py@kind@ScalarObject *)op)->obval;
    }
    else {
        temp = (@type@)@func2@(op);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op) && !PyString_Check(op) &&
                                            !PyUnicode_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError,
                    "setting an array element with a sequence.");
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((@type@ *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap), ap);
    }
    return 0;
}

/**end repeat**/

/**begin repeat
 *
 * #TYPE = CFLOAT, CDOUBLE#
 * #type = float, double#
 */
static PyObject *
@TYPE@_getitem(char *ip, PyArrayObject *ap) {
    @type@ t1, t2;

    if ((ap == NULL) || PyArray_ISBEHAVED_RO(ap)) {
        return PyComplex_FromDoubles((double)((@type@ *)ip)[0],
                (double)((@type@ *)ip)[1]);
    }
    else {
        int size = sizeof(@type@);
        Bool swap = !PyArray_ISNOTSWAPPED(ap);
        copy_and_swap(&t1, ip, size, 1, 0, swap);
        copy_and_swap(&t2, ip + size, size, 1, 0, swap);
        return PyComplex_FromDoubles((double)t1, (double)t2);
    }
}

/**end repeat**/



/**begin repeat
 *
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = float, double, longdouble#
 * #kind = CFloat, CDouble, CLongDouble#
 */
static int
@TYPE@_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    Py_complex oop;
    PyObject *op2;
    c@type@ temp;
    int rsize;

    if (!(PyArray_IsScalar(op, @kind@))) {
        if (PyArray_Check(op) && (PyArray_NDIM(op) == 0)) {
            op2 = ((PyArrayObject *)op)->descr->f->getitem
                  (((PyArrayObject *)op)->data, (PyArrayObject *)op);
        }
        else {
            op2 = op; Py_INCREF(op);
        }
        if (op2 == Py_None) {
            oop.real = NPY_NAN;
            oop.imag = NPY_NAN;
        }
        else {
            oop = PyComplex_AsCComplex (op2);
        }
        Py_DECREF(op2);
        if (PyErr_Occurred()) {
            return -1;
        }
        temp.real = (@type@) oop.real;
        temp.imag = (@type@) oop.imag;
    }
    else {
        temp = ((Py@kind@ScalarObject *)op)->obval;
    }
    memcpy(ov, &temp, ap->descr->elsize);
    if (!PyArray_ISNOTSWAPPED(ap)) {
        byte_swap_vector(ov, 2, sizeof(@type@));
    }
    rsize = sizeof(@type@);
    copy_and_swap(ov, &temp, rsize, 2, rsize, !PyArray_ISNOTSWAPPED(ap));
    return 0;
}

/**end repeat**/

/*
 * These return array scalars which are different than other date-types.
 */

static PyObject *
LONGDOUBLE_getitem(char *ip, PyArrayObject *ap)
{
    return PyArray_Scalar(ip, ap->descr, NULL);
}

static int
LONGDOUBLE_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    /* ensure alignment */
    longdouble temp;

    if (PyArray_IsScalar(op, LongDouble)) {
        temp = ((PyLongDoubleScalarObject *)op)->obval;
    }
    else {
        temp = (longdouble) MyPyFloat_AsDouble(op);
    }
    if (PyErr_Occurred()) {
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap)) {
        *((longdouble *)ov) = temp;
    }
    else {
        copy_and_swap(ov, &temp, ap->descr->elsize, 1, 0,
                !PyArray_ISNOTSWAPPED(ap));
    }
    return 0;
}

static PyObject *
CLONGDOUBLE_getitem(char *ip, PyArrayObject *ap)
{
    return PyArray_Scalar(ip, ap->descr, NULL);
}

/* UNICODE */
static PyObject *
UNICODE_getitem(char *ip, PyArrayObject *ap)
{
    Py_ssize_t size = PyArray_ITEMSIZE(ap);
    int swap = !PyArray_ISNOTSWAPPED(ap);
    int align = !PyArray_ISALIGNED(ap);

    return (PyObject *)PyUnicode_FromUCS4(ip, size, swap, align);
}

static int
UNICODE_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    PyObject *temp;
    Py_UNICODE *ptr;
    int datalen;
#ifndef Py_UNICODE_WIDE
    char *buffer;
#endif

    if (!PyBytes_Check(op) && !PyUnicode_Check(op) &&
            PySequence_Check(op) && PySequence_Size(op) > 0) {
        PyErr_SetString(PyExc_ValueError,
                "setting an array element with a sequence");
        return -1;
    }
    /* Sequence_Size might have returned an error */
    if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#if defined(NPY_PY3K)
    if (PyBytes_Check(op)) {
        /* Try to decode from ASCII */
        temp = PyUnicode_FromEncodedObject(op, "ASCII", "strict");
        if (temp == NULL) {
            return -1;
        }
    }
    else if ((temp=PyObject_Str(op)) == NULL) {
#else
    if ((temp=PyObject_Unicode(op)) == NULL) {
#endif
        return -1;
    }
    ptr = PyUnicode_AS_UNICODE(temp);
    if ((ptr == NULL) || (PyErr_Occurred())) {
        Py_DECREF(temp);
        return -1;
    }
    datalen = PyUnicode_GET_DATA_SIZE(temp);

#ifdef Py_UNICODE_WIDE
    memcpy(ov, ptr, MIN(ap->descr->elsize, datalen));
#else
    if (!PyArray_ISALIGNED(ap)) {
        buffer = _pya_malloc(ap->descr->elsize);
        if (buffer == NULL) {
            Py_DECREF(temp);
            PyErr_NoMemory();
            return -1;
        }
    }
    else {
        buffer = ov;
    }
    datalen = PyUCS2Buffer_AsUCS4(ptr, (PyArray_UCS4 *)buffer,
            datalen >> 1, ap->descr->elsize >> 2);
    datalen <<= 2;
    if (!PyArray_ISALIGNED(ap)) {
        memcpy(ov, buffer, datalen);
        _pya_free(buffer);
    }
#endif
    /* Fill in the rest of the space with 0 */
    if (ap->descr->elsize > datalen) {
        memset(ov + datalen, 0, (ap->descr->elsize - datalen));
    }
    if (!PyArray_ISNOTSWAPPED(ap)) {
        byte_swap_vector(ov, ap->descr->elsize >> 2, 4);
    }
    Py_DECREF(temp);
    return 0;
}

/* STRING
 *
 * can handle both NULL-terminated and not NULL-terminated cases
 * will truncate all ending NULLs in returned string.
 */
static PyObject *
STRING_getitem(char *ip, PyArrayObject *ap)
{
    /* Will eliminate NULLs at the end */
    char *ptr;
    int size = ap->descr->elsize;

    ptr = ip + size - 1;
    while (*ptr-- == '\0' && size > 0) {
        size--;
    }
    return PyBytes_FromStringAndSize(ip,size);
}

static int
STRING_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    char *ptr;
    Py_ssize_t len;
    PyObject *temp = NULL;

    /* Handle case of assigning from an array scalar */
    if (PyArray_Check(op) && PyArray_NDIM(op) == 0) {
        temp = PyArray_ToScalar(PyArray_DATA(op), op);
        if (temp == NULL) {
            return -1;
        }
        else {
            int res = STRING_setitem(temp, ov, ap);
            Py_DECREF(temp);
            return res;
        }
    }

    if (!PyBytes_Check(op) && !PyUnicode_Check(op)
            && PySequence_Check(op) && PySequence_Size(op) != 0) {
        PyErr_SetString(PyExc_ValueError,
                "cannot set an array element with a sequence");
        return -1;
    }
#if defined(NPY_PY3K)
    if (PyUnicode_Check(op)) {
        /* Assume ASCII codec -- function similarly as Python 2 */
        temp = PyUnicode_AsASCIIString(op);
        if (temp == NULL) return -1;
    }
    else if (PyBytes_Check(op) || PyMemoryView_Check(op)) {
        temp = PyObject_Bytes(op);
        if (temp == NULL) {
            return -1;
        }
    }
    else {
        /* Emulate similar casting behavior as on Python 2 */
        PyObject *str;
        str = PyObject_Str(op);
        if (str == NULL) {
            return -1;
        }
        temp = PyUnicode_AsASCIIString(str);
        Py_DECREF(str);
        if (temp == NULL) {
            return -1;
        }
    }
#else
    if ((temp = PyObject_Str(op)) == NULL) {
        return -1;
    }
#endif
    if (PyBytes_AsStringAndSize(temp, &ptr, &len) == -1) {
        Py_DECREF(temp);
        return -1;
    }
    memcpy(ov, ptr, MIN(ap->descr->elsize,len));
    /*
     * If string lenth is smaller than room in array
     * Then fill the rest of the element size with NULL
     */
    if (ap->descr->elsize > len) {
        memset(ov + len, 0, (ap->descr->elsize - len));
    }
    Py_DECREF(temp);
    return 0;
}

/* OBJECT */

#define __ALIGNED(obj, sz) ((((size_t) obj) % (sz))==0)

static PyObject *
OBJECT_getitem(char *ip, PyArrayObject *ap)
{
    PyObject *obj;
    NPY_COPY_PYOBJECT_PTR(&obj, ip);
    if (obj == NULL) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    else {
        Py_INCREF(obj);
        return obj;
    }
}


static int
OBJECT_setitem(PyObject *op, char *ov, PyArrayObject *ap)
{
    PyObject *obj;

    NPY_COPY_PYOBJECT_PTR(&obj, ov);
    Py_XDECREF(obj);

    Py_INCREF(op);
    NPY_COPY_PYOBJECT_PTR(ov, &op);

    return PyErr_Occurred() ? -1 : 0;
}

/* VOID */

static PyObject *
VOID_getitem(char *ip, PyArrayObject *ap)
{
    PyObject *u = NULL;
    PyArray_Descr* descr;
    int itemsize;

    descr = ap->descr;
    if (descr->names != NULL) {
        PyObject *key;
        PyObject *names;
        int i, n;
        PyObject *ret;
        PyObject *tup, *title;
        PyArray_Descr *new;
        int offset;
        int savedflags;

        /* get the names from the fields dictionary*/
        names = descr->names;
        n = PyTuple_GET_SIZE(names);
        ret = PyTuple_New(n);
        savedflags = ap->flags;
        for (i = 0; i < n; i++) {
            key = PyTuple_GET_ITEM(names, i);
            tup = PyDict_GetItem(descr->fields, key);
            if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset, &title)) {
                Py_DECREF(ret);
                ap->descr = descr;
                return NULL;
            }
            ap->descr = new;
            /* update alignment based on offset */
            if ((new->alignment > 1)
                    && ((((intp)(ip+offset)) % new->alignment) != 0)) {
                ap->flags &= ~ALIGNED;
            }
            else {
                ap->flags |= ALIGNED;
            }
            PyTuple_SET_ITEM(ret, i, new->f->getitem(ip+offset, ap));
            ap->flags = savedflags;
        }
        ap->descr = descr;
        return ret;
    }

    if (descr->subarray) {
        /* return an array of the basic type */
        PyArray_Dims shape = {NULL, -1};
        PyObject *ret;

        if (!(PyArray_IntpConverter(descr->subarray->shape, &shape))) {
            PyDimMem_FREE(shape.ptr);
            PyErr_SetString(PyExc_ValueError,
                    "invalid shape in fixed-type tuple.");
            return NULL;
        }
        Py_INCREF(descr->subarray->base);
        ret = PyArray_NewFromDescr(&PyArray_Type,
                descr->subarray->base, shape.len, shape.ptr,
                NULL, ip, ap->flags&(~NPY_F_CONTIGUOUS), NULL);
        PyDimMem_FREE(shape.ptr);
        if (!ret) {
            return NULL;
        }
        PyArray_BASE(ret) = (PyObject *)ap;
        Py_INCREF(ap);
        PyArray_UpdateFlags((PyArrayObject *)ret, UPDATE_ALL);
        return ret;
    }

    if (PyDataType_FLAGCHK(descr, NPY_ITEM_HASOBJECT)
            || PyDataType_FLAGCHK(descr, NPY_ITEM_IS_POINTER)) {
        PyErr_SetString(PyExc_ValueError,
                "tried to get void-array with object members as buffer.");
        return NULL;
    }
    itemsize = ap->descr->elsize;
#if defined(NPY_PY3K)
    /*
     * Return a byte array; there are no plain buffer objects on Py3
     */
    {
        intp dims[1], strides[1];
        PyArray_Descr *descr;
        dims[0] = itemsize;
        strides[0] = 1;
        descr = PyArray_DescrNewFromType(PyArray_BYTE);
        u = PyArray_NewFromDescr(&PyArray_Type, descr, 1, dims, strides,
                                 ip,
                                 PyArray_ISWRITEABLE(ap) ? NPY_WRITEABLE : 0,
                                 NULL);
        ((PyArrayObject*)u)->base = ap;
        Py_INCREF(ap);
    }
#else
    /*
     * default is to return buffer object pointing to
     * current item a view of it
     */
    if (PyArray_ISWRITEABLE(ap)) {
        u = PyBuffer_FromReadWriteMemory(ip, itemsize);
    }
    else {
        u = PyBuffer_FromMemory(ip, itemsize);
    }
#endif
    if (u == NULL) {
        goto fail;
    }
    return u;

fail:
    return NULL;
}


NPY_NO_EXPORT int PyArray_CopyObject(PyArrayObject *, PyObject *);

static int
VOID_setitem(PyObject *op, char *ip, PyArrayObject *ap)
{
    PyArray_Descr* descr;
    int itemsize=ap->descr->elsize;
    int res;

    descr = ap->descr;
    if (descr->names && PyTuple_Check(op)) {
        PyObject *key;
        PyObject *names;
        int i, n;
        PyObject *tup, *title;
        PyArray_Descr *new;
        int offset;
        int savedflags;

        res = -1;
        /* get the names from the fields dictionary*/
        names = descr->names;
        n = PyTuple_GET_SIZE(names);
        if (PyTuple_GET_SIZE(op) != n) {
            PyErr_SetString(PyExc_ValueError,
                    "size of tuple must match number of fields.");
            return -1;
        }
        savedflags = ap->flags;
        for (i = 0; i < n; i++) {
            key = PyTuple_GET_ITEM(names, i);
            tup = PyDict_GetItem(descr->fields, key);
            if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset, &title)) {
                ap->descr = descr;
                return -1;
            }
            ap->descr = new;
            /* remember to update alignment flags */
            if ((new->alignment > 1)
                    && ((((intp)(ip+offset)) % new->alignment) != 0)) {
                ap->flags &= ~ALIGNED;
            }
            else {
                ap->flags |= ALIGNED;
            }
            res = new->f->setitem(PyTuple_GET_ITEM(op, i), ip+offset, ap);
            ap->flags = savedflags;
            if (res < 0) {
                break;
            }
        }
        ap->descr = descr;
        return res;
    }

    if (descr->subarray) {
        /* copy into an array of the same basic type */
        PyArray_Dims shape = {NULL, -1};
        PyObject *ret;
        if (!(PyArray_IntpConverter(descr->subarray->shape, &shape))) {
            PyDimMem_FREE(shape.ptr);
            PyErr_SetString(PyExc_ValueError,
                    "invalid shape in fixed-type tuple.");
            return -1;
        }
        Py_INCREF(descr->subarray->base);
        ret = PyArray_NewFromDescr(&PyArray_Type,
                descr->subarray->base, shape.len, shape.ptr,
                NULL, ip, ap->flags, NULL);
        PyDimMem_FREE(shape.ptr);
        if (!ret) {
            return -1;
        }
        PyArray_BASE(ret) = (PyObject *)ap;
        Py_INCREF(ap);
        PyArray_UpdateFlags((PyArrayObject *)ret, UPDATE_ALL);
        res = PyArray_CopyObject((PyArrayObject *)ret, op);
        Py_DECREF(ret);
        return res;
    }

    /* Default is to use buffer interface to set item */
    {
        const void *buffer;
        Py_ssize_t buflen;
        if (PyDataType_FLAGCHK(descr, NPY_ITEM_HASOBJECT)
                || PyDataType_FLAGCHK(descr, NPY_ITEM_IS_POINTER)) {
            PyErr_SetString(PyExc_ValueError,
                    "Setting void-array with object members using buffer.");
            return -1;
        }
        res = PyObject_AsReadBuffer(op, &buffer, &buflen);
        if (res == -1) {
            goto fail;
        }
        memcpy(ip, buffer, NPY_MIN(buflen, itemsize));
        if (itemsize > buflen) {
            memset(ip + buflen, 0, itemsize - buflen);
        }
    }
    return 0;

fail:
    return -1;
}

/*
 * Acknowledgement:  Example code contributed by Marty Fuhr sponsored by
 * Google Summer of Code 2009 was used to integrate and adapt the mxDateTime
 * parser
 */

/* #include "datetime.c" --- now included in multiarray_onefile */


/* DateTime Objects in Python only keep microsecond resolution.
 *
 * When converting from datetime objects with an event component return a
 * tuple: * (baseunit, number of event)  where baseunit follows is a datetime
 * type and number of events is a Python integer
 */


/*
 * Return a Python Datetime Object from a number representing the number of
 * units since the epoch (1970-01-01T00:00:00Z) ignoring leap seconds.
 */

NPY_NO_EXPORT PyObject *
PyDateTime_FromNormalized(npy_datetime val, NPY_DATETIMEUNIT base)
{
    npy_datetimestruct ydate;

    /* Must be here to use PyDateTime_FromDateAndTime */
    PyDateTime_IMPORT;

    /* We just truncate the unused variables and don't wory about overflow */
    PyArray_DatetimeToDatetimeStruct(val, base, &ydate);

    /* FIXME?: We discard ydate.ns, ydate.ps, ydate.fs, and ydate.as */
    return PyDateTime_FromDateAndTime(ydate.year, ydate.month, ydate.day,
                                      ydate.hour, ydate.min, ydate.sec,
                                      ydate.us);
}

/*
 * We also can lose precision and range here.  Ignored.
 * Don't use this function if you care.
 */

NPY_NO_EXPORT PyObject *
PyTimeDelta_FromNormalized(npy_timedelta val, NPY_DATETIMEUNIT base)
{
    npy_timedeltastruct td;

    PyDateTime_IMPORT;
    PyArray_TimedeltaToTimedeltaStruct(val, base, &td);

    /* We discard td.ps and td.as */
    return PyDelta_FromDSU(td.day, td.sec, td.us);
}


NPY_NO_EXPORT PyObject *
PyDateTime_FromInt64(datetime val, PyArray_Descr *descr)
{
    PyArray_DatetimeMetaData *meta;

    meta = PyDataType_GetDatetimeMetaData(descr);
    if (meta == NULL) {
        PyErr_SetString(PyExc_RuntimeError,
                "metadata not set for descriptor");
        return NULL;
    }

    if (meta->events > 1) {
        int events, rem, div;
        PyObject *obj;

        obj = PyTuple_New(2);
        events = meta->events;
        div = val/events;
        rem = val % events;
        PyTuple_SET_ITEM(obj, 1, PyInt_FromLong(rem));
        /* This resets meta->events for recursive call */
        meta->events = 1;
        PyTuple_SET_ITEM(obj, 0, PyDateTime_FromInt64(div, descr));
        meta->events = events;
        if (PyErr_Occurred()) {
            Py_DECREF(obj);
            return NULL;
        }
        return obj;
    }

    /*
     * We normalize the number to a base-unit and then return a
     * Python Datetime Object
     *
     * FIXME? : We silently truncate if it doesn't fit, either too
     *  wide (e.g. 10 BC) or too narrow (nanoseconds)
     */

    /* Normalization and then conversion to Datetime */
    /* FIXME? : Check for Overflow... */
    return PyDateTime_FromNormalized(val*meta->num, meta->base);
}


NPY_NO_EXPORT PyObject *
PyTimeDelta_FromInt64(timedelta val, PyArray_Descr *descr)
{
    PyArray_DatetimeMetaData *meta;
    meta = PyDataType_GetDatetimeMetaData(descr);
    if (meta == NULL) {
        PyErr_SetString(PyExc_RuntimeError,
                "metadata not set for descriptor");
        return NULL;
    }

    if (meta->events > 1) {
        int events, rem, div;
        PyObject *obj;

        obj = PyTuple_New(2);
        events = meta->events;
        div = val/events;
        rem = val % events;
        PyTuple_SET_ITEM(obj, 1, PyInt_FromLong(rem));
        /* This resets meta->events for recursive call */
        meta->events = 1;
        PyTuple_SET_ITEM(obj, 0, PyTimeDelta_FromInt64(div, descr));
        meta->events = events;
        if (PyErr_Occurred()) {
            Py_DECREF(obj);
            return NULL;
        }
        return obj;
    }

    /* FIXME? : Check for Overflow */
    return PyTimeDelta_FromNormalized(val*meta->num, meta->base);
}



NPY_NO_EXPORT npy_datetime
PyDateTime_AsNormalized(PyObject *obj, NPY_DATETIMEUNIT base)
{
    npy_datetimestruct ydate;

    /* Must be here to use PyDateTime_FromDateAndTime */
    PyDateTime_IMPORT;

    if (!PyDateTime_Check(obj) && !PyDate_Check(obj)) {
        PyErr_SetString(PyExc_ValueError,
                "Must be a datetime.date or datetime.datetime object");
        return -1;
    }

    ydate.year = PyDateTime_GET_YEAR(obj);
    ydate.month = PyDateTime_GET_MONTH(obj);
    ydate.day = PyDateTime_GET_DAY(obj);

    if (PyDateTime_Check(obj)) {
        ydate.hour = PyDateTime_DATE_GET_HOUR(obj);
        ydate.min = PyDateTime_DATE_GET_MINUTE(obj);
        ydate.sec = PyDateTime_DATE_GET_SECOND(obj);
        ydate.us = PyDateTime_DATE_GET_MICROSECOND(obj);
    }
    else {
        ydate.hour = 0;
        ydate.min = 0;
        ydate.sec = 0;
        ydate.us = 0;
    }

    ydate.ps = 0;
    ydate.as = 0;

    /* We just truncate the unused variables and don't wory about overflow */
    return PyArray_DatetimeStructToDatetime(base, &ydate);
}

NPY_NO_EXPORT npy_timedelta
PyTimeDelta_AsNormalized(PyObject *obj, NPY_DATETIMEUNIT base)
{
    npy_timedeltastruct td;

    PyDateTime_IMPORT;

    if (!PyDelta_Check(obj)) {
        PyErr_SetString(PyExc_ValueError,
                "Must be a datetime.timedelta object");
        return -1;
    }

    td.day = ((PyDateTime_Delta *)obj)->days;
    td.sec = ((PyDateTime_Delta *)obj)->seconds;
    td.us  = ((PyDateTime_Delta *)obj)->microseconds;
    td.ps  = 0;
    td.as  = 0;

    return PyArray_TimedeltaStructToTimedelta(base, &td);
}


/*
 * These expect a 2-tuple if meta->events > 1  (baseobj, num-counts)
 * where baseobj is a datetime object or a timedelta object respectively.
 *
 */

NPY_NO_EXPORT npy_datetime
PyDateTime_AsInt64(PyObject *obj, PyArray_Descr *descr)
{
    PyArray_DatetimeMetaData *meta;
    npy_datetime res;

    meta = PyDataType_GetDatetimeMetaData(descr);
    if (meta == NULL) {
        PyErr_SetString(PyExc_RuntimeError,
                "metadata not set for descriptor");
        return -1;
    }


    if (meta->events > 1) {
        datetime tmp;
        int events;

        if (!PyTuple_Check(obj) || PyTuple_GET_SIZE(obj) != 2) {
            PyErr_SetString(PyExc_ValueError,
                    "need a 2-tuple on setting if events > 1");
            return -1;
        }
        /* Alter the dictionary and call again */
        /* FIXME:  not thread safe */
        events = meta->events;
        meta->events = 1;
        tmp = PyDateTime_AsInt64(PyTuple_GET_ITEM(obj, 0), descr);
        meta->events = events;
        if (PyErr_Occurred()) {
            return -1;
        }
        /* FIXME: Check for overflow */
        tmp *= events;
        tmp += MyPyLong_AsLongLong(PyTuple_GET_ITEM(obj, 1));
        if (PyErr_Occurred()) {
            return -1;
        }
        return tmp;
    }

    res = PyDateTime_AsNormalized(obj, meta->base);
    return res/meta->num;
}


NPY_NO_EXPORT timedelta
PyTimeDelta_AsInt64(PyObject *obj, PyArray_Descr *descr)
{
    PyArray_DatetimeMetaData *meta;
    npy_timedelta res;

    meta = PyDataType_GetDatetimeMetaData(descr);
    if (meta == NULL) {
        PyErr_SetString(PyExc_RuntimeError,
                "metadata not set for descriptor");
        return -1;
    }

    if (meta->events > 1) {
        timedelta tmp;
        int events;

        if (!PyTuple_Check(obj) || PyTuple_GET_SIZE(obj) != 2) {
            PyErr_SetString(PyExc_ValueError,
                    "need a 2-tuple on setting if events > 1");
            return -1;
        }
        /* Alter the dictionary and call again (not thread safe) */
        events = meta->events;
        meta->events = 1;
        tmp = PyTimeDelta_AsInt64(PyTuple_GET_ITEM(obj, 0), descr);
        meta->events = events;
        if (PyErr_Occurred()) {
            return -1;
        }
        /* FIXME: Check for overflow */
        tmp *= events;
        tmp += MyPyLong_AsLongLong(PyTuple_GET_ITEM(obj, 1));
        if (PyErr_Occurred()) {
            return -1;
        }
        return tmp;
    }

    res = PyTimeDelta_AsNormalized(obj, meta->base);
    return res / meta->num;
}


/*
 * Always return DateTime Object after normalizing to basic units (or a tuple
 * if meta->events > 1):
 *
 *  Problem:  DateTime does not support all the resolutions (ns) nor the
 *  dynamic range (pre 1 AD) of NumPy Date-times.
 *
 * getitem is not used that much --- if losing resolution hurts, stick
 * with the array scalar versions of the date-time.
 *
 * considered returning array scalars here just like longdouble. This has the
 * problem of recursion in some cases (because in a few places the code
 * expects getitem to return a Python-system object)
 *
 * considered returning different things depending on the resolution but this
 * would make it hard to write generic code  --- but do you need to write
 * generic code on all the frequencies because they cover a wide range.
 *
 * Solution:  The use-case of actually wanting a date-time object when the
 * resolution and dynamic range match, make it the compelling default. When it
 * does fails, there are alternatives for the programmer to use.
 *
 * New question: Should we change (c)longdouble at this point? to return Python Float?
 */

static PyObject *
DATETIME_getitem(char *ip, PyArrayObject *ap) {
    datetime t1;

    if ((ap == NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((datetime *)ip);
        return PyDateTime_FromInt64((datetime)t1, ap->descr);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap), ap);
        return PyDateTime_FromInt64((datetime)t1, ap->descr);
    }
}


static PyObject *
TIMEDELTA_getitem(char *ip, PyArrayObject *ap) {
    timedelta t1;

    if ((ap == NULL) || PyArray_ISBEHAVED_RO(ap)) {
        t1 = *((timedelta *)ip);
        return PyTimeDelta_FromInt64((timedelta)t1, ap->descr);
    }
    else {
        ap->descr->f->copyswap(&t1, ip, !PyArray_ISNOTSWAPPED(ap), ap);
        return PyTimeDelta_FromInt64((timedelta)t1, ap->descr);
    }
}

/* FIXME:
 *  This needs to take
 *      1) Integers and Longs (anything that can be converted to an Int)
 *      2) Strings (ISO-style dates)
 *      3) Datetime Scalars (that it converts based on scalar dtype.
 *      4) Datetime and Date objects
 *  Plus a tuple for meta->events > 1
 *
 *      3) is partially implemented, 4) is implemented
 */

static int
DATETIME_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    /* ensure alignment */
    datetime temp;

    if (PyArray_IsScalar(op, Datetime)) {
        /* This needs to convert based on type */
        temp = ((PyDatetimeScalarObject *)op)->obval;
    }
#if defined(NPY_PY3K)
    else if (PyUString_Check(op)) {
#else
    else if (PyUString_Check(op) || PyUnicode_Check(op)) {
#endif
        /* FIXME:  Converts to DateTime first and therefore does not handle extended notation */
        /* import _mx_datetime_parser
         * res = _mx_datetime_parser(name)
         *  Convert from datetime to Int
         */
        PyObject *res, *module;

        module = PyImport_ImportModule("numpy.core._mx_datetime_parser");
        if (module == NULL) { return -1; }
        res = PyObject_CallMethod(module, "datetime_from_string", "O", op);
        Py_DECREF(module);
        if (res == NULL) { return -1; }
        temp = PyDateTime_AsInt64(res, ap->descr);
        Py_DECREF(res);
        if (PyErr_Occurred()) return -1;
    }
    else if (PyInt_Check(op)) {
        temp = PyInt_AS_LONG(op);
    }
    else if (PyLong_Check(op)) {
        temp = PyLong_AsLongLong(op);
    }
    else {
        temp = PyDateTime_AsInt64(op, ap->descr);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, _SEQUENCE_MESSAGE);
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((datetime *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap), ap);
    }
    return 0;
}

/* FIXME: This needs to take
 *    1) Integers and Longs (anything that can be converted to an Int)
 *    2) Timedelta scalar objects (with resolution conversion)
 *    3) Python Timedelta objects
 *
 *    Plus a tuple for meta->events > 1
 */

static int
TIMEDELTA_setitem(PyObject *op, char *ov, PyArrayObject *ap) {
    /* ensure alignment */
    timedelta temp;

    if (PyArray_IsScalar(op, Timedelta)) {
        temp = ((PyTimedeltaScalarObject *)op)->obval;
    }
    else if (PyInt_Check(op)) {
        temp = PyInt_AS_LONG(op);
    }
    else if (PyLong_Check(op)) {
        temp = PyLong_AsLongLong(op);
    }
    else {
        temp = PyTimeDelta_AsInt64(op, ap->descr);
    }
    if (PyErr_Occurred()) {
        if (PySequence_Check(op)) {
            PyErr_Clear();
            PyErr_SetString(PyExc_ValueError, _SEQUENCE_MESSAGE);
        }
        return -1;
    }
    if (ap == NULL || PyArray_ISBEHAVED(ap))
        *((timedelta *)ov)=temp;
    else {
        ap->descr->f->copyswap(ov, &temp, !PyArray_ISNOTSWAPPED(ap), ap);
    }
    return 0;
}


/*
 *****************************************************************************
 **                       TYPE TO TYPE CONVERSIONS                          **
 *****************************************************************************
 */


/* Assumes contiguous, and aligned, from and to */


/**begin repeat
 *
 * #TOTYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *           LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE, DATETIME,
 *           TIMEDELTA#
 * #totype = byte, ubyte, short, ushort, int, uint, long, ulong,
 *           longlong, ulonglong, float, double, longdouble, datetime,
 *           timedelta#
 */

/**begin repeat1
 *
 * #FROMTYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *             LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE, DATETIME,
 *             TIMEDELTA#
 * #fromtype = byte, ubyte, short, ushort, int, uint, long, ulong,
 *             longlong, ulonglong, float, double, longdouble, datetime,
 *             timedelta#
 */
static void
@FROMTYPE@_to_@TOTYPE@(@fromtype@ *ip, @totype@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (@totype@)*ip++;
    }
}
/**end repeat1**/

/**begin repeat1
 *
 * #FROMTYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #fromtype = float, double, longdouble#
 */
static void
@FROMTYPE@_to_@TOTYPE@(@fromtype@ *ip, @totype@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (@totype@)*ip;
        ip += 2;
    }
}
/**end repeat1**/

/**end repeat**/


/**begin repeat
 *
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, LONGDOUBLE, DATETIME,
 *         TIMEDELTA#
 * #type = byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, longdouble, datetime,
 *         timedelta#
 */

static void
@TYPE@_to_HALF(@type@ *ip, npy_half *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = npy_float_to_half((float)(*ip++));
    }
}

static void
HALF_to_@TYPE@(npy_half *ip, @type@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (@type@)npy_half_to_float(*ip++);
    }
}

/**end repeat**/
#if SIZEOF_SHORT == 2
#define HALF_to_HALF SHORT_to_SHORT
#elif SIZEOF_INT == 2
#define HALF_to_HALF INT_to_INT
#endif

/**begin repeat
 *
 * #TYPE = FLOAT, DOUBLE, CFLOAT, CDOUBLE#
 * #type = float, double, float, double#
 * #itype = npy_uint32, npy_uint64, npy_uint32, npy_uint64#
 * #iscomplex = 0, 0, 1, 1#
 */

static void
@TYPE@_to_HALF(@itype@ *ip, npy_half *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = npy_@type@bits_to_halfbits(*ip);
#if @iscomplex@
        ip += 2;
#else
        ip++;
#endif
    }
}

static void
HALF_to_@TYPE@(npy_half *ip, @itype@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = npy_halfbits_to_@type@bits(*ip++);
#if @iscomplex@
        *op++ = 0;
#endif
    }
}

/**end repeat**/

static void
CLONGDOUBLE_to_HALF(longdouble *ip, npy_half *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = npy_double_to_half((double) (*ip++));
        ip += 2;
    }
}

static void
HALF_to_CLONGDOUBLE(npy_half *ip, longdouble *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = npy_half_to_double(*ip++);
        *op++ = 0;
    }
}

/**begin repeat
 *
 * #FROMTYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *             LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE, DATETIME,
 *             TIMEDELTA#
 * #fromtype = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *             longlong, ulonglong, float, double, longdouble, datetime,
 *             timedelta#
*/
static void
@FROMTYPE@_to_BOOL(@fromtype@ *ip, Bool *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (Bool)(*ip++ != FALSE);
    }
}
/**end repeat**/

static void
HALF_to_BOOL(npy_half *ip, Bool *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (Bool)(!npy_half_iszero(*ip++));
    }
}

/**begin repeat
 *
 * #FROMTYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #fromtype = cfloat, cdouble, clongdouble#
*/
static void
@FROMTYPE@_to_BOOL(@fromtype@ *ip, Bool *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op = (Bool)(((*ip).real != FALSE) || ((*ip).imag != FALSE));
        op++;
        ip++;
    }
}
/**end repeat**/

/**begin repeat
 * #TOTYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *           LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE, DATETIME,
 *           TIMEDELTA#
 * #totype = byte, ubyte, short, ushort, int, uint, long, ulong,
 *           longlong, ulonglong, npy_half, float, double, longdouble, datetime,
 *           timedelta#
 * #one = 1*10, NPY_HALF_ONE, 1*5#
 * #zero = 0*10, NPY_HALF_ZERO, 0*5#
 */
static void
BOOL_to_@TOTYPE@(Bool *ip, @totype@ *op, intp n,
             PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (@totype@)((*ip++ != FALSE) ? @one@ : @zero@);
    }
}
/**end repeat**/

/**begin repeat
 *
 * #TOTYPE = CFLOAT,CDOUBLE,CLONGDOUBLE#
 * #totype = float, double, longdouble#
 */

/**begin repeat1
 * #FROMTYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *             LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE, DATETIME,
 *             TIMEDELTA#
 * #fromtype = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *             longlong, ulonglong, float, double, longdouble, datetime,
 *             timedelta#
 */
static void
@FROMTYPE@_to_@TOTYPE@(@fromtype@ *ip, @totype@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    while (n--) {
        *op++ = (@totype@)*ip++;
        *op++ = 0.0;
    }

}
/**end repeat1**/
/**end repeat**/

/**begin repeat
 *
 * #TOTYPE = CFLOAT,CDOUBLE,CLONGDOUBLE#
 * #totype = float, double, longdouble#
 */

/**begin repeat1
 * #FROMTYPE = CFLOAT,CDOUBLE,CLONGDOUBLE#
 * #fromtype = float, double, longdouble#
 */
static void
@FROMTYPE@_to_@TOTYPE@(@fromtype@ *ip, @totype@ *op, intp n,
               PyArrayObject *NPY_UNUSED(aip), PyArrayObject *NPY_UNUSED(aop))
{
    n <<= 1;
    while (n--) {
        *op++ = (@totype@)*ip++;
    }
}

/**end repeat1**/
/**end repeat**/

/**begin repeat
 *
 * #FROMTYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *             LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *             CFLOAT, CDOUBLE, CLONGDOUBLE, STRING, UNICODE, VOID, OBJECT,
 *             DATETIME, TIMEDELTA#
 * #fromtype = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *             longlong, ulonglong, npy_half, float, double, longdouble,
 *             cfloat, cdouble, clongdouble, char, char, char, PyObject *,
 *             datetime, timedelta#
 * #skip = 1*18, aip->descr->elsize*3, 1*3#
 */
static void
@FROMTYPE@_to_OBJECT(@fromtype@ *ip, PyObject **op, intp n, PyArrayObject *aip,
                 PyArrayObject *NPY_UNUSED(aop))
{
    intp i;
    int skip = @skip@;
    for (i = 0; i < n; i++, ip +=skip, op++) {
        Py_XDECREF(*op);
        *op = @FROMTYPE@_getitem((char *)ip, aip);
    }
}
/**end repeat**/

#define _NPY_UNUSEDBOOL  NPY_UNUSED
#define _NPY_UNUSEDBYTE  NPY_UNUSED
#define _NPY_UNUSEDUBYTE  NPY_UNUSED
#define _NPY_UNUSEDSHORT  NPY_UNUSED
#define _NPY_UNUSEDUSHORT  NPY_UNUSED
#define _NPY_UNUSEDINT  NPY_UNUSED
#define _NPY_UNUSEDUINT  NPY_UNUSED
#define _NPY_UNUSEDLONG  NPY_UNUSED
#define _NPY_UNUSEDULONG  NPY_UNUSED
#define _NPY_UNUSEDLONGLONG  NPY_UNUSED
#define _NPY_UNUSEDULONGLONG  NPY_UNUSED
#define _NPY_UNUSEDHALF NPY_UNUSED
#define _NPY_UNUSEDFLOAT  NPY_UNUSED
#define _NPY_UNUSEDDOUBLE  NPY_UNUSED
#define _NPY_UNUSEDLONGDOUBLE  NPY_UNUSED
#define _NPY_UNUSEDCFLOAT  NPY_UNUSED
#define _NPY_UNUSEDCDOUBLE  NPY_UNUSED
#define _NPY_UNUSEDCLONGDOUBLE  NPY_UNUSED
#define _NPY_UNUSEDDATETIME  NPY_UNUSED
#define _NPY_UNUSEDTIMEDELTA  NPY_UNUSED
#define _NPY_UNUSEDHALF NPY_UNUSED
#define _NPY_UNUSEDSTRING
#define _NPY_UNUSEDVOID
#define _NPY_UNUSEDUNICODE

/**begin repeat
 *
 * #TOTYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *           LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *           CFLOAT, CDOUBLE, CLONGDOUBLE, STRING, UNICODE, VOID, DATETIME,
 *           TIMEDELTA#
 * #totype = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *           longlong, ulonglong, npy_half, float, double, longdouble,
 *           cfloat, cdouble, clongdouble, char, char, char, datetime,
 *           timedelta#
 * #skip = 1*18, aop->descr->elsize*3, 1*2#
 */
static void
OBJECT_to_@TOTYPE@(PyObject **ip, @totype@ *op, intp n,
        PyArrayObject *_NPY_UNUSED@TOTYPE@(aip), PyArrayObject *aop)
{
    intp i;
    int skip = @skip@;

    for (i = 0; i < n; i++, ip++, op += skip) {
        if (*ip == NULL) {
            @TOTYPE@_setitem(Py_False, (char *)op, aop);
        }
        else {
            @TOTYPE@_setitem(*ip, (char *)op, aop);
        }
    }
}
/**end repeat**/


/**begin repeat
 *
 * #from = STRING*23, UNICODE*23, VOID*23#
 * #fromtyp = char*69#
 * #to = (BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE, CLONGDOUBLE, STRING, UNICODE, VOID, DATETIME, TIMEDELTA)*3#
 * #totyp = (Bool, byte, ubyte, short, ushort, int, uint, long, ulong, longlong, ulonglong, npy_half, float, double, longdouble, cfloat, cdouble, clongdouble, char, char, char, datetime, timedelta)*3#
 * #oskip = (1*18,aop->descr->elsize*3,1*2)*3#
 * #convert = 1*18, 0*3, 1*2, 1*18, 0*3, 1*2, 0*23#
 * #convstr = (Int*9, Long*2, Float*4, Complex*3, Tuple*3, Long*2)*3#
 */
static void
@from@_to_@to@(@fromtyp@ *ip, @totyp@ *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    intp i;
    PyObject *temp = NULL;
    int skip = aip->descr->elsize;
    int oskip = @oskip@;

    for (i = 0; i < n; i++, ip+=skip, op+=oskip) {
        temp = @from@_getitem((char *)ip, aip);
        if (temp == NULL) {
            return;
        }
        /* convert from Python object to needed one */
#if @convert@
        {
        PyObject *new, *args;
        /* call out to the Python builtin given by convstr */
        args = Py_BuildValue("(N)", temp);
#if defined(NPY_PY3K)
#define PyInt_Type PyLong_Type
#endif
        new = Py@convstr@_Type.tp_new(&Py@convstr@_Type, args, NULL);
#if defined(NPY_PY3K)
#undef PyInt_Type
#endif
        Py_DECREF(args);
        temp = new;
        if (temp == NULL) {
            return;
        }
        }
#endif /* @convert@ */
        if (@to@_setitem(temp,(char *)op, aop)) {
            Py_DECREF(temp);
            return;
        }
        Py_DECREF(temp);
    }
}
/**end repeat**/


/**begin repeat
 *
 * #to = STRING*20, UNICODE*20, VOID*20#
 * #totyp = char*20, char*20, char*20#
 * #from = (BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA)*3#
 * #fromtyp = (Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *            longlong, ulonglong, npy_half, float, double, longdouble,
 *            cfloat, cdouble, clongdouble, datetime, timedelta)*3#
 */
static void
@from@_to_@to@(@fromtyp@ *ip, @totyp@ *op, intp n, PyArrayObject *aip,
             PyArrayObject *aop)
{
    intp i;
    PyObject *temp = NULL;
    int skip = 1;
    int oskip = aop->descr->elsize;
    for (i = 0; i < n; i++, ip += skip, op += oskip) {
        temp = @from@_getitem((char *)ip, aip);
        if (temp == NULL) {
            Py_INCREF(Py_False);
            temp = Py_False;
        }
        if (@to@_setitem(temp,(char *)op, aop)) {
            Py_DECREF(temp);
            return;
        }
        Py_DECREF(temp);
    }
}

/**end repeat**/


/*
 *****************************************************************************
 **                               SCAN                                      **
 *****************************************************************************
 */


/*
 * The first ignore argument is for backwards compatibility.
 * Should be removed when the API version is bumped up.
 */

/**begin repeat
 * #fname = SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG#
 * #type = short, ushort, int, uint, long, ulong, longlong, ulonglong#
 * #format = "hd", "hu", "d", "u", "ld", "lu", LONGLONG_FMT, ULONGLONG_FMT#
 */
static int
@fname@_scan(FILE *fp, @type@ *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))
{
    return fscanf(fp, "%"@format@, ip);
}
/**end repeat**/

/**begin repeat
 * #fname = FLOAT, DOUBLE, LONGDOUBLE#
 * #type = float, double, longdouble#
 */
static int
@fname@_scan(FILE *fp, @type@ *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))
{
    double result;
    int ret;

    ret = NumPyOS_ascii_ftolf(fp, &result);
    *ip = (@type@) result;
    return ret;
}
/**end repeat**/

static int
HALF_scan(FILE *fp, npy_half *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignored))
{
    double result;
    int ret;

    ret = NumPyOS_ascii_ftolf(fp, &result);
    *ip = npy_double_to_half(result);
    return ret;
}

/**begin repeat
 * #fname = BYTE, UBYTE#
 * #type = byte, ubyte#
 * #btype = int, uint#
 * #format = "d", "u"#
 */
static int
@fname@_scan(FILE *fp, @type@ *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignore2))
{
    @btype@ temp;
    int num;

    num = fscanf(fp, "%"@format@, &temp);
    *ip = (@type@) temp;
    return num;
}
/**end repeat**/

static int
BOOL_scan(FILE *fp, Bool *ip, void *NPY_UNUSED(ignore), PyArray_Descr *NPY_UNUSED(ignore2))
{
    double result;
    int ret;

    ret = NumPyOS_ascii_ftolf(fp, &result);
    *ip = (Bool) (result != 0.0);
    return ret;
}

/**begin repeat
 * #fname = CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, STRING, UNICODE, VOID,
 *          DATETIME, TIMEDELTA#
 */
#define @fname@_scan NULL
/**end repeat**/


/*
 *****************************************************************************
 **                             FROMSTR                                     **
 *****************************************************************************
 */


/**begin repeat
 * #fname = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG,
 *          ULONGLONG, DATETIME, TIMEDELTA#
 * #type = byte, ubyte, short, ushort, int, uint, long, ulong, longlong,
 *         ulonglong, datetime, timedelta#
 * #func = (l, ul)*5, l, l#
 * #btype = (long, ulong)*5, long, long#
 */
static int
@fname@_fromstr(char *str, @type@ *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))
{
    @btype@ result;

    result = PyOS_strto@func@(str, endptr, 10);
    *ip = (@type@) result;
    return 0;
}
/**end repeat**/

/**begin repeat
 *
 * #fname=FLOAT,DOUBLE,LONGDOUBLE#
 * #type=float,double,longdouble#
 */
static int
@fname@_fromstr(char *str, @type@ *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))
{
    double result;

    result = NumPyOS_ascii_strtod(str, endptr);
    *ip = (@type@) result;
    return 0;
}
/**end repeat**/

static int
HALF_fromstr(char *str, npy_half *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))
{
    double result;

    result = NumPyOS_ascii_strtod(str, endptr);
    *ip = npy_double_to_half(result);
    return 0;
}

static int
BOOL_fromstr(char *str, Bool *ip, char **endptr, PyArray_Descr *NPY_UNUSED(ignore))
{
    double result;

    result = NumPyOS_ascii_strtod(str, endptr);
    *ip = (Bool) (result != 0.0);
    return 0;
}

/**begin repeat
 * #fname = CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, STRING, UNICODE, VOID#
 */
#define @fname@_fromstr NULL
/**end repeat**/


/*
 *****************************************************************************
 **                            COPYSWAPN                                    **
 *****************************************************************************
 */


/**begin repeat
 *
 * #fname = SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG, HALF, FLOAT,
 *          DOUBLE, LONGDOUBLE, DATETIME, TIMEDELTA#
 * #fsize = SHORT, SHORT, INT, INT, LONG, LONG, LONGLONG, LONGLONG, HALF, FLOAT,
 *          DOUBLE, LONGDOUBLE, DATETIME, TIMEDELTA#
 * #type = short, ushort, int, uint, long, ulong, longlong, ulonglong, npy_half, float,
 *         double, longdouble, datetime, timedelta#
 */
static void
@fname@_copyswapn (void *dst, intp dstride, void *src, intp sstride,
                   intp n, int swap, void *NPY_UNUSED(arr))
{
    if (src != NULL) {
        if (sstride == sizeof(@type@) && dstride == sizeof(@type@)) {
            memcpy(dst, src, n*sizeof(@type@));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(@type@));
        }
    }
    if (swap) {
        _strided_byte_swap(dst, dstride, n, sizeof(@type@));
    }
}

static void
@fname@_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))
{

    if (src != NULL) {
        /* copy first if needed */
        memcpy(dst, src, sizeof(@type@));
    }
    if (swap) {
        char *a, *b, c;

        a = (char *)dst;
#if SIZEOF_@fsize@ == 2
        b = a + 1;
        c = *a; *a++ = *b; *b = c;
#elif SIZEOF_@fsize@ == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            int i, nn;

            b = a + (SIZEOF_@fsize@-1);
            nn = SIZEOF_@fsize@ / 2;
            for (i = 0; i < nn; i++) {
                c = *a;
                *a++ = *b;
                *b-- = c;
            }
        }
#endif
    }
}

/**end repeat**/

/**begin repeat
 *
 * #fname = BOOL, BYTE, UBYTE#
 * #type = Bool, byte, ubyte#
 */
static void
@fname@_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int NPY_UNUSED(swap), void *NPY_UNUSED(arr))
{
    if (src != NULL) {
        if (sstride == sizeof(@type@) && dstride == sizeof(@type@)) {
            memcpy(dst, src, n*sizeof(@type@));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride,
                    n, sizeof(@type@));
        }
    }
    /* ignore swap */
}

static void
@fname@_copyswap (void *dst, void *src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))
{
    if (src != NULL) {
        /* copy first if needed */
        memcpy(dst, src, sizeof(@type@));
    }
    /* ignore swap */
}

/**end repeat**/



/**begin repeat
 *
 * #fname = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = cfloat,  cdouble,  clongdouble#
 * #fsize = FLOAT, DOUBLE, LONGDOUBLE#
*/
static void
@fname@_copyswapn (void *dst, intp dstride, void *src, intp sstride, intp n,
                   int swap, void *NPY_UNUSED(arr))
{

    if (src != NULL) {
        /* copy first if needed */
        if (sstride == sizeof(@type@) && dstride == sizeof(@type@)) {
            memcpy(dst, src, n*sizeof(@type@));
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride, n,
                    sizeof(@type@));
        }
    }

    if (swap) {
        _strided_byte_swap(dst, dstride, n, SIZEOF_@fsize@);
        _strided_byte_swap(((char *)dst + SIZEOF_@fsize@), dstride,
                n, SIZEOF_@fsize@);
    }
}

static void
@fname@_copyswap (void *dst, void *src, int swap, void *NPY_UNUSED(arr))
{
    if (src != NULL) /* copy first if needed */
        memcpy(dst, src, sizeof(@type@));

    if (swap) {
        char *a, *b, c;
        a = (char *)dst;
#if SIZEOF_@fsize@ == 4
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 2;
        b = a + 3;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 8
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 4;
        b = a + 7;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 10
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 5;
        b = a + 9;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 12
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 6;
        b = a + 11;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#elif SIZEOF_@fsize@ == 16
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
        a += 8;
        b = a + 15;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b-- = c;
        c = *a; *a++ = *b; *b   = c;
#else
        {
            int i, nn;

            b = a + (SIZEOF_@fsize@ - 1);
            nn = SIZEOF_@fsize@ / 2;
            for (i = 0; i < nn; i++) {
                c = *a;
                *a++ = *b;
                *b-- = c;
            }
            a += nn / 2;
            b = a + (SIZEOF_@fsize@ - 1);
            nn = SIZEOF_@fsize@ / 2;
            for (i = 0; i < nn; i++) {
                c = *a;
                *a++ = *b;
                *b-- = c;
            }
        }
#endif
    }
}

/**end repeat**/

static void
OBJECT_copyswapn (PyObject **dst, intp dstride, PyObject **src, intp sstride,
                  intp n, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))
{
    intp i;
    if (src != NULL) {
        if (__ALIGNED(dst, sizeof(PyObject **))
                && __ALIGNED(src, sizeof(PyObject **))
                && __ALIGNED(dstride, sizeof(PyObject **))
                && __ALIGNED(sstride, sizeof(PyObject **))) {
            dstride /= sizeof(PyObject **);
            sstride /= sizeof(PyObject **);
            for (i = 0; i < n; i++) {
                Py_XINCREF(*src);
                Py_XDECREF(*dst);
                *dst = *src;
                dst += dstride;
                src += sstride;
            }
        }
        else {
            unsigned char *dstp, *srcp;
            PyObject *tmp;
            dstp = (unsigned char*)dst;
            srcp = (unsigned char*)src;
            for (i = 0; i < n; i++) {
                NPY_COPY_PYOBJECT_PTR(&tmp, dstp);
                Py_XDECREF(tmp);
                NPY_COPY_PYOBJECT_PTR(&tmp, srcp);
                Py_XINCREF(tmp);
                NPY_COPY_PYOBJECT_PTR(dstp, srcp);
                dstp += dstride;
                srcp += sstride;
            }
        }
    }
    /* ignore swap */
    return;
}

static void
OBJECT_copyswap(PyObject **dst, PyObject **src, int NPY_UNUSED(swap), void *NPY_UNUSED(arr))
{

    if (src != NULL) {
        if (__ALIGNED(dst,sizeof(PyObject **)) && __ALIGNED(src,sizeof(PyObject **))) {
            Py_XINCREF(*src);
            Py_XDECREF(*dst);
            *dst = *src;
        }
        else {
            PyObject *tmp;
            NPY_COPY_PYOBJECT_PTR(&tmp, dst);
            Py_XDECREF(tmp);
            NPY_COPY_PYOBJECT_PTR(&tmp, src);
            Py_XINCREF(tmp);
            NPY_COPY_PYOBJECT_PTR(dst, src);
        }
    }
}

/* ignore swap */
static void
STRING_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                  intp n, int NPY_UNUSED(swap), PyArrayObject *arr)
{
    if (src != NULL && arr != NULL) {
        int itemsize = arr->descr->elsize;

        if (dstride == itemsize && sstride == itemsize) {
            memcpy(dst, src, itemsize * n);
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src, sstride, n,
                    itemsize);
        }
    }
    return;
}

/* */
static void
VOID_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                intp n, int swap, PyArrayObject *arr)
{
    if (arr == NULL) {
        return;
    }
    if (PyArray_HASFIELDS(arr)) {
        PyObject *key, *value, *title = NULL;
        PyArray_Descr *new, *descr;
        int offset;
        Py_ssize_t pos = 0;

        descr = arr->descr;
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if NPY_TITLE_KEY(key, value) {
                continue;
            }
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset, &title)) {
                arr->descr = descr;
                return;
            }
            arr->descr = new;
            new->f->copyswapn(dst+offset, dstride,
                    (src != NULL ? src+offset : NULL),
                    sstride, n, swap, arr);
        }
        arr->descr = descr;
        return;
    }
    if (swap && arr->descr->subarray != NULL) {
        PyArray_Descr *descr, *new;
        npy_intp num;
        npy_intp i;
        int subitemsize;
        char *dstptr, *srcptr;

        descr = arr->descr;
        new = descr->subarray->base;
        arr->descr = new;
        dstptr = dst;
        srcptr = src;
        subitemsize = new->elsize;
        num = descr->elsize / subitemsize;
        for (i = 0; i < n; i++) {
            new->f->copyswapn(dstptr, subitemsize, srcptr,
                    subitemsize, num, swap, arr);
            dstptr += dstride;
            if (srcptr) {
                srcptr += sstride;
            }
        }
        arr->descr = descr;
        return;
    }
    if (src != NULL) {
        memcpy(dst, src, arr->descr->elsize * n);
    }
    return;
}

static void
VOID_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)
{
    if (arr == NULL) {
        return;
    }
    if (PyArray_HASFIELDS(arr)) {
        PyObject *key, *value, *title = NULL;
        PyArray_Descr *new, *descr;
        int offset;
        Py_ssize_t pos = 0;

        descr = arr->descr;
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if NPY_TITLE_KEY(key, value) {
                continue;
            }
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset, &title)) {
                arr->descr = descr;
                return;
            }
            arr->descr = new;
            new->f->copyswap(dst+offset,
                    (src != NULL ? src+offset : NULL),
                    swap, arr);
        }
        arr->descr = descr;
        return;
    }
    if (swap && arr->descr->subarray != NULL) {
        PyArray_Descr *descr, *new;
        npy_intp num;
        int itemsize;

        descr = arr->descr;
        new = descr->subarray->base;
        arr->descr = new;
        itemsize = new->elsize;
        num = descr->elsize / itemsize;
        new->f->copyswapn(dst, itemsize, src,
                itemsize, num, swap, arr);
        arr->descr = descr;
        return;
    }
    if (src != NULL) {
        memcpy(dst, src, arr->descr->elsize);
    }
    return;
}


static void
UNICODE_copyswapn (char *dst, intp dstride, char *src, intp sstride,
                   intp n, int swap, PyArrayObject *arr)
{
    int itemsize;

    if (arr == NULL) {
        return;
    }
    itemsize = arr->descr->elsize;
    if (src != NULL) {
        if (dstride == itemsize && sstride == itemsize) {
            memcpy(dst, src, n * itemsize);
        }
        else {
            _unaligned_strided_byte_copy(dst, dstride, src,
                    sstride, n, itemsize);
        }
    }

    n *= itemsize;
    if (swap) {
        char *a, *b, c;

        /* n is the number of unicode characters to swap */
        n >>= 2;
        for (a = (char *)dst; n > 0; n--) {
            b = a + 3;
            c = *a;
            *a++ = *b;
            *b-- = c;
            c = *a;
            *a++ = *b;
            *b-- = c;
            a += 2;
        }
    }
}


static void
STRING_copyswap(char *dst, char *src, int NPY_UNUSED(swap), PyArrayObject *arr)
{
    if (src != NULL && arr != NULL) {
        memcpy(dst, src, arr->descr->elsize);
    }
}

static void
UNICODE_copyswap (char *dst, char *src, int swap, PyArrayObject *arr)
{
    int itemsize;

    if (arr == NULL) {
        return;
    }
    itemsize = arr->descr->elsize;
    if (src != NULL) {
        memcpy(dst, src, itemsize);
    }

    if (swap) {
        char *a, *b, c;
        itemsize >>= 2;
        for (a = (char *)dst; itemsize>0; itemsize--) {
            b = a + 3;
            c = *a;
            *a++ = *b;
            *b-- = c;
            c = *a;
            *a++ = *b;
            *b-- = c;
            a += 2;
        }
    }
}


/*
 *****************************************************************************
 **                                 NONZERO                                 **
 *****************************************************************************
 */

#define _NONZERO(a) ((a) != 0)

/**begin repeat
 *
 * #fname = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *          LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         datetime, timedelta#
 * #isfloat = 0*11, 1*4, 0*2#
 * #nonzero = _NONZERO*11, !npy_half_iszero, _NONZERO*5#
 */
static Bool
@fname@_nonzero (char *ip, PyArrayObject *ap)
{
    if (ap == NULL || PyArray_ISBEHAVED_RO(ap)) {
        @type@ *ptmp = (@type@ *)ip;
        return (Bool) @nonzero@(*ptmp);
    }
    else {
        /*
         * Don't worry about swapping for integer types,
         * since we are just testing for equality with 0.
         * For float types, the signed zeros require us to swap.
         */
        @type@ tmp;
#if @isfloat@
        ap->descr->f->copyswap(&tmp, ip, !PyArray_ISNOTSWAPPED(ap), ap);
#else
        memcpy(&tmp, ip, sizeof(@type@));
#endif
        return (Bool) @nonzero@(tmp);
    }
}
/**end repeat**/

/**begin repeat
 *
 * #fname=CFLOAT,CDOUBLE,CLONGDOUBLE#
 * #type=cfloat, cdouble, clongdouble#
 */
static Bool
@fname@_nonzero (char *ip, PyArrayObject *ap)
{
    if (ap == NULL || PyArray_ISBEHAVED_RO(ap)) {
        @type@ *ptmp = (@type@ *)ip;
        return (Bool) ((ptmp->real != 0) || (ptmp->imag != 0));
    }
    else {
        @type@ tmp;
        ap->descr->f->copyswap(&tmp, ip, !PyArray_ISNOTSWAPPED(ap), ap);
        return (Bool) ((tmp.real != 0) || (tmp.imag != 0));
    }
}
/**end repeat**/


#define WHITESPACE " \t\n\r\v\f"
#define WHITELEN 6

static Bool
Py_STRING_ISSPACE(char ch)
{
    char white[] = WHITESPACE;
    int j;
    Bool space = FALSE;

    for (j = 0; j < WHITELEN; j++) {
        if (ch == white[j]) {
            space = TRUE;
            break;
        }
    }
    return space;
}

static Bool
STRING_nonzero (char *ip, PyArrayObject *ap)
{
    int len = ap->descr->elsize;
    int i;
    Bool nonz = FALSE;

    for (i = 0; i < len; i++) {
        if (!Py_STRING_ISSPACE(*ip)) {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    return nonz;
}

#ifdef Py_UNICODE_WIDE
#define PyArray_UCS4_ISSPACE Py_UNICODE_ISSPACE
#else
#define PyArray_UCS4_ISSPACE(ch) Py_STRING_ISSPACE((char)ch)
#endif

static Bool
UNICODE_nonzero (PyArray_UCS4 *ip, PyArrayObject *ap)
{
    int len = ap->descr->elsize >> 2;
    int i;
    Bool nonz = FALSE;
    char *buffer = NULL;

    if ((!PyArray_ISNOTSWAPPED(ap)) || (!PyArray_ISALIGNED(ap))) {
        buffer = _pya_malloc(ap->descr->elsize);
        if (buffer == NULL) {
            return nonz;
        }
        memcpy(buffer, ip, ap->descr->elsize);
        if (!PyArray_ISNOTSWAPPED(ap)) {
            byte_swap_vector(buffer, len, 4);
        }
        ip = (PyArray_UCS4 *)buffer;
    }

    for (i = 0; i < len; i++) {
        if (!PyArray_UCS4_ISSPACE(*ip)) {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    _pya_free(buffer);
    return nonz;
}

static Bool
OBJECT_nonzero (PyObject **ip, PyArrayObject *ap)
{

    if (PyArray_ISALIGNED(ap)) {
        if (*ip == NULL) {
            return FALSE;
        }
        return (Bool) PyObject_IsTrue(*ip);
    }
    else {
        PyObject *obj;
        NPY_COPY_PYOBJECT_PTR(&obj, ip);
        if (obj == NULL) {
            return FALSE;
        }
        return (Bool) PyObject_IsTrue(obj);
    }
}

/*
 * if we have fields, then nonzero only if all sub-fields are nonzero.
 */
static Bool
VOID_nonzero (char *ip, PyArrayObject *ap)
{
    int i;
    int len;
    Bool nonz = FALSE;

    if (PyArray_HASFIELDS(ap)) {
        PyArray_Descr *descr, *new;
        PyObject *key, *value, *title;
        int savedflags, offset;
        Py_ssize_t pos = 0;

        descr = ap->descr;
        savedflags = ap->flags;
        while (PyDict_Next(descr->fields, &pos, &key, &value)) {
            if NPY_TITLE_KEY(key, value) {
                continue;
            }
            if (!PyArg_ParseTuple(value, "Oi|O", &new, &offset,
                        &title)) {
                PyErr_Clear();
                continue;
            }
            ap->descr = new;
            ap->flags = savedflags;
            if ((new->alignment > 1) && !__ALIGNED(ip+offset, new->alignment)) {
                ap->flags &= ~ALIGNED;
            }
            else {
                ap->flags |= ALIGNED;
            }
            if (new->f->nonzero(ip+offset, ap)) {
                nonz = TRUE;
                break;
            }
        }
        ap->descr = descr;
        ap->flags = savedflags;
        return nonz;
    }
    len = ap->descr->elsize;
    for (i = 0; i < len; i++) {
        if (*ip != '\0') {
            nonz = TRUE;
            break;
        }
        ip++;
    }
    return nonz;
}

#undef __ALIGNED


/*
 *****************************************************************************
 **                                 COMPARE                                 **
 *****************************************************************************
 */


/* boolean type */

static int
BOOL_compare(Bool *ip1, Bool *ip2, PyArrayObject *NPY_UNUSED(ap))
{
    return (*ip1 ? (*ip2 ? 0 : 1) : (*ip2 ? -1 : 0));
}


/* integer types */

/**begin repeat
 * #TYPE = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, DATETIME, TIMEDELTA#
 * #type = byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, datetime, timedelta#
 */

static int
@TYPE@_compare (@type@ *pa, @type@ *pb, PyArrayObject *NPY_UNUSED(ap))
{
    const @type@ a = *pa;
    const @type@ b = *pb;

    return a < b ? -1 : a == b ? 0 : 1;
}

/**end repeat**/


/* float types */

/*
 * The real/complex comparison functions are compatible with the new sort
 * order for nans introduced in numpy 1.4.0. All nan values now compare
 * larger than non-nan values and are sorted to the end. The comparison
 * order is:
 *
 *      Real: [R, nan]
 *      Complex: [R + Rj, R + nanj, nan + Rj, nan + nanj]
 *
 *  where complex values with the same nan placements are sorted according
 *  to the non-nan part if it exists. If both the real and imaginary parts
 *  of complex types are non-nan the order is the same as the real parts
 *  unless they happen to be equal, in which case the order is that of the
 *  imaginary parts.
 */

/**begin repeat
 *
 * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 * #type = float, double, longdouble#
 */

#define LT(a,b) ((a) < (b) || ((b) != (b) && (a) ==(a)))

static int
@TYPE@_compare(@type@ *pa, @type@ *pb)
{
    const @type@ a = *pa;
    const @type@ b = *pb;
    int ret;

    if (LT(a,b)) {
        ret = -1;
    }
    else if (LT(b,a)) {
        ret = 1;
    }
    else {
        ret = 0;
    }
    return ret;
}


static int
C@TYPE@_compare(@type@ *pa, @type@ *pb)
{
    const @type@ ar = pa[0];
    const @type@ ai = pa[1];
    const @type@ br = pb[0];
    const @type@ bi = pb[1];
    int ret;

    if (ar < br) {
        if (ai == ai || bi != bi) {
            ret = -1;
        }
        else {
            ret = 1;
        }
    }
    else if (br < ar) {
        if (bi == bi || ai != ai) {
            ret = 1;
        }
        else {
            ret = -1;
        }
    }
    else if (ar == br || (ar != ar && br != br)) {
        if (LT(ai,bi)) {
            ret = -1;
        }
        else if (LT(bi,ai)) {
            ret = 1;
        }
        else {
            ret = 0;
        }
    }
    else if (ar == ar) {
        ret = -1;
    }
    else {
        ret = 1;
    }

    return ret;
}

#undef LT

/**end repeat**/

static int
HALF_compare (npy_half *pa, npy_half *pb, PyArrayObject *NPY_UNUSED(ap))
{
    npy_half a = *pa, b = *pb;
    Bool a_isnan, b_isnan;
    int ret;

    a_isnan = npy_half_isnan(a);
    b_isnan = npy_half_isnan(b);

    if (a_isnan) {
        ret = b_isnan ? 0 : -1;
    } else if (b_isnan) {
        ret = 1;
    } else if(npy_half_lt_nonan(a, b)) {
        ret = -1;
    } else if(npy_half_lt_nonan(b, a)) {
        ret = 1;
    } else {
        ret = 0;
    }

    return ret;
}


/* object type */

static int
OBJECT_compare(PyObject **ip1, PyObject **ip2, PyArrayObject *NPY_UNUSED(ap))
{
    /*
     * ALIGNMENT NOTE: It seems that PyArray_Sort is already handling
     * the alignment of pointers, so it doesn't need to be handled
     * here.
     */
    if ((*ip1 == NULL) || (*ip2 == NULL)) {
        if (ip1 == ip2) {
            return 1;
        }
        if (ip1 == NULL) {
            return -1;
        }
        return 1;
    }
#if defined(NPY_PY3K)
    if (PyObject_RichCompareBool(*ip1, *ip2, Py_LT) == 1) {
        return -1;
    }
    else if (PyObject_RichCompareBool(*ip1, *ip2, Py_GT) == 1) {
        return 1;
    }
    else {
        return 0;
    }
#else
    return PyObject_Compare(*ip1, *ip2);
#endif
}


/* string type */

static int
STRING_compare(char *ip1, char *ip2, PyArrayObject *ap)
{
    const unsigned char *c1 = (unsigned char *)ip1;
    const unsigned char *c2 = (unsigned char *)ip2;
    const size_t len = ap->descr->elsize;
    size_t i;

    for(i = 0; i < len; ++i) {
        if (c1[i] != c2[i]) {
            return (c1[i] > c2[i]) ? 1 : -1;
        }
    }
    return 0;
}


/* unicode type */

static int
UNICODE_compare(PyArray_UCS4 *ip1, PyArray_UCS4 *ip2,
                PyArrayObject *ap)
{
    int itemsize = ap->descr->elsize;

    if (itemsize < 0) {
        return 0;
    }
    itemsize >>= 2;
    while (itemsize-- > 0) {
        PyArray_UCS4 c1 = *ip1++;
        PyArray_UCS4 c2 = *ip2++;
        if (c1 != c2) {
            return (c1 < c2) ? -1 : 1;
        }
    }
    return 0;
}


/* void type */

/*
 * If fields are defined, then compare on first field and if equal
 * compare on second field.  Continue until done or comparison results
 * in not_equal.
 *
 * Must align data passed on to sub-comparisons.
 * Also must swap data based on to sub-comparisons.
 */
static int
VOID_compare(char *ip1, char *ip2, PyArrayObject *ap)
{
    PyArray_Descr *descr, *new;
    PyObject *names, *key;
    PyObject *tup, *title;
    char *nip1, *nip2;
    int i, offset, res = 0, swap=0;

    if (!PyArray_HASFIELDS(ap)) {
        return STRING_compare(ip1, ip2, ap);
    }
    descr = ap->descr;
    /*
     * Compare on the first-field.  If equal, then
     * compare on the second-field, etc.
     */
    names = descr->names;
    for (i = 0; i < PyTuple_GET_SIZE(names); i++) {
        key = PyTuple_GET_ITEM(names, i);
        tup = PyDict_GetItem(descr->fields, key);
        if (!PyArg_ParseTuple(tup, "Oi|O", &new, &offset, &title)) {
            goto finish;
        }
        ap->descr = new;
        swap = PyArray_ISBYTESWAPPED(ap);
        nip1 = ip1+offset;
        nip2 = ip2+offset;
        if ((swap) || (new->alignment > 1)) {
            if ((swap) || (((intp)(nip1) % new->alignment) != 0)) {
                /* create buffer and copy */
                nip1 = _pya_malloc(new->elsize);
                if (nip1 == NULL) {
                    goto finish;
                }
                memcpy(nip1, ip1+offset, new->elsize);
                if (swap)
                    new->f->copyswap(nip1, NULL, swap, ap);
            }
            if ((swap) || (((intp)(nip2) % new->alignment) != 0)) {
                /* copy data to a buffer */
                nip2 = _pya_malloc(new->elsize);
                if (nip2 == NULL) {
                    if (nip1 != ip1+offset) {
                        _pya_free(nip1);
                    }
                    goto finish;
                }
                memcpy(nip2, ip2+offset, new->elsize);
                if (swap)
                    new->f->copyswap(nip2, NULL, swap, ap);
            }
        }
        res = new->f->compare(nip1, nip2, ap);
        if ((swap) || (new->alignment > 1)) {
            if (nip1 != ip1+offset) {
                _pya_free(nip1);
            }
            if (nip2 != ip2+offset) {
                _pya_free(nip2);
            }
        }
        if (res != 0) {
            break;
        }
    }

finish:
    ap->descr = descr;
    return res;
}


/*
 *****************************************************************************
 **                                 ARGFUNC                                 **
 *****************************************************************************
 */

#define _LESS_THAN_OR_EQUAL(a,b) ((a) <= (b))

/**begin repeat
 *
 * #fname = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *          LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         float, double, longdouble, datetime, timedelta#
 * #isfloat = 0*11, 1*7, 0*2#
 * #isnan = nop*11, npy_half_isnan, npy_isnan*6, nop*2#
 * #le = _LESS_THAN_OR_EQUAL*11, npy_half_le, _LESS_THAN_OR_EQUAL*8#
 * #iscomplex = 0*15, 1*3, 0*2#
 * #incr = ip++*15, ip+=2*3, ip++*2#
 */
static int
@fname@_argmax(@type@ *ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))
{
    intp i;
    @type@ mp = *ip;
#if @iscomplex@
    @type@ mp_im = ip[1];
#endif

    *max_ind = 0;

#if @isfloat@
    if (@isnan@(mp)) {
        /* nan encountered; it's maximal */
        return 0;
    }
#endif
#if @iscomplex@
    if (@isnan@(mp_im)) {
        /* nan encountered; it's maximal */
        return 0;
    }
#endif

    for (i = 1; i < n; i++) {
        @incr@;
        /*
         * Propagate nans, similarly as max() and min()
         */
#if @iscomplex@
        /* Lexical order for complex numbers */
        if ((ip[0] > mp) || ((ip[0] == mp) && (ip[1] > mp_im))
                || @isnan@(ip[0]) || @isnan@(ip[1])) {
            mp = ip[0];
            mp_im = ip[1];
            *max_ind = i;
            if (@isnan@(mp) || @isnan@(mp_im)) {
                /* nan encountered, it's maximal */
                break;
            }
        }
#else
        if (!@le@(*ip, mp)) {  /* negated, for correct nan handling */
            mp = *ip;
            *max_ind = i;
#if @isfloat@
            if (@isnan@(mp)) {
                /* nan encountered, it's maximal */
                break;
            }
#endif
        }
#endif
    }
    return 0;
}

/**end repeat**/

/**begin repeat
 *
 * #fname = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *          LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         float, double, longdouble, datetime, timedelta#
 * #isfloat = 0*11, 1*7, 0*2#
 * #isnan = nop*11, npy_half_isnan, npy_isnan*6, nop*2#
 * #le = _LESS_THAN_OR_EQUAL*11, npy_half_le, _LESS_THAN_OR_EQUAL*8#
 * #iscomplex = 0*15, 1*3, 0*2#
 * #incr = ip++*15, ip+=2*3, ip++*2#
 */
static int
@fname@_argmin(@type@ *ip, intp n, intp *min_ind, PyArrayObject *NPY_UNUSED(aip))
{
    intp i;
    @type@ mp = *ip;
#if @iscomplex@
    @type@ mp_im = ip[1];
#endif

    *min_ind = 0;

#if @isfloat@
    if (@isnan@(mp)) {
        /* nan encountered; it's minimal */
        return 0;
    }
#endif
#if @iscomplex@
    if (@isnan@(mp_im)) {
        /* nan encountered; it's minimal */
        return 0;
    }
#endif

    for (i = 1; i < n; i++) {
        @incr@;
        /*
         * Propagate nans, similarly as max() and min()
         */
#if @iscomplex@
        /* Lexical order for complex numbers */
        if ((mp > ip[0]) || ((ip[0] == mp) && (mp_im > ip[1]))
                || @isnan@(ip[0]) || @isnan@(ip[1])) {
            mp = ip[0];
            mp_im = ip[1];
            *min_ind = i;
            if (@isnan@(mp) || @isnan@(mp_im)) {
                /* nan encountered, it's minimal */
                break;
            }
        }
#else
        if (!@le@(mp, *ip)) {  /* negated, for correct nan handling */
            mp = *ip;
            *min_ind = i;
#if @isfloat@
            if (@isnan@(mp)) {
                /* nan encountered, it's minimal */
                break;
            }
#endif
        }
#endif
    }
    return 0;
}

/**end repeat**/

#undef _LESS_THAN_OR_EQUAL

static int
OBJECT_argmax(PyObject **ip, intp n, intp *max_ind, PyArrayObject *NPY_UNUSED(aip))
{
    intp i;
    PyObject *mp = ip[0];

    *max_ind = 0;
    i = 1;
    while (i < n && mp == NULL) {
        mp = ip[i];
        i++;
    }
    for (; i < n; i++) {
        ip++;
#if defined(NPY_PY3K)
        if (*ip != NULL && PyObject_RichCompareBool(*ip, mp, Py_GT) == 1) {
#else
        if (*ip != NULL && PyObject_Compare(*ip, mp) > 0) {
#endif
            mp = *ip;
            *max_ind = i;
        }
    }
    return 0;
}

/**begin repeat
 *
 * #fname = STRING, UNICODE#
 * #type = char, PyArray_UCS4#
 */
static int
@fname@_argmax(@type@ *ip, intp n, intp *max_ind, PyArrayObject *aip)
{
    intp i;
    int elsize = aip->descr->elsize;
    @type@ *mp = (@type@ *)_pya_malloc(elsize);

    if (mp==NULL) return 0;
    memcpy(mp, ip, elsize);
    *max_ind = 0;
    for(i=1; i<n; i++) {
        ip += elsize;
        if (@fname@_compare(ip,mp,aip) > 0) {
            memcpy(mp, ip, elsize);
            *max_ind=i;
        }
    }
    _pya_free(mp);
    return 0;
}

/**end repeat**/

#define VOID_argmax NULL

static int
OBJECT_argmin(PyObject **ip, intp n, intp *min_ind, PyArrayObject *NPY_UNUSED(aip))
{
    intp i;
    PyObject *mp = ip[0];

    *min_ind = 0;
    i = 1;
    while (i < n && mp == NULL) {
        mp = ip[i];
        i++;
    }
    for (; i < n; i++) {
        ip++;
#if defined(NPY_PY3K)
        if (*ip != NULL && PyObject_RichCompareBool(mp, *ip, Py_GT) == 1) {
#else
        if (*ip != NULL && PyObject_Compare(mp, *ip) > 0) {
#endif
            mp = *ip;
            *min_ind = i;
        }
    }
    return 0;
}

/**begin repeat
 *
 * #fname = STRING, UNICODE#
 * #type = char, PyArray_UCS4#
 */
static int
@fname@_argmin(@type@ *ip, intp n, intp *min_ind, PyArrayObject *aip)
{
    intp i;
    int elsize = PyArray_DESCR(aip)->elsize;
    @type@ *mp = (@type@ *)PyArray_malloc(elsize);

    if (mp==NULL) return 0;
    memcpy(mp, ip, elsize);
    *min_ind = 0;
    for(i=1; i<n; i++) {
        ip += elsize;
        if (@fname@_compare(mp,ip,aip) > 0) {
            memcpy(mp, ip, elsize);
            *min_ind=i;
        }
    }
    PyArray_free(mp);
    return 0;
}

/**end repeat**/


#define VOID_argmin NULL


/*
 *****************************************************************************
 **                                  DOT                                    **
 *****************************************************************************
 */

/*
 * dot means inner product
 */

static void
BOOL_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
         void *NPY_UNUSED(ignore))
{
    Bool tmp = FALSE;
    intp i;

    for (i = 0; i < n; i++, ip1 += is1, ip2 += is2) {
        if ((*((Bool *)ip1) != 0) && (*((Bool *)ip2) != 0)) {
            tmp = TRUE;
            break;
        }
    }
    *((Bool *)op) = tmp;
}

/**begin repeat
 *
 * #name = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE,
 *         DATETIME, TIMEDELTA#
 * #type = byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, float, double, longdouble,
 *         datetime, timedelta#
 * #out = long, ulong, long, ulong, long, ulong, long, ulong,
 *        longlong, ulonglong, float, double, longdouble,
 *        datetime, timedelta#
 */
static void
@name@_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *NPY_UNUSED(ignore))
{
    @out@ tmp = (@out@)0;
    intp i;

    for (i = 0; i < n; i++, ip1 += is1, ip2 += is2) {
        tmp += (@out@)(*((@type@ *)ip1)) *
               (@out@)(*((@type@ *)ip2));
    }
    *((@type@ *)op) = (@type@) tmp;
}
/**end repeat**/

static void
HALF_dot(char *ip1, npy_intp is1, char *ip2, npy_intp is2, char *op, npy_intp n,
           void *NPY_UNUSED(ignore))
{
    float tmp = 0.0f;
    npy_intp i;

    for (i = 0; i < n; i++, ip1 += is1, ip2 += is2) {
        tmp += npy_half_to_float(*((npy_half *)ip1)) *
               npy_half_to_float(*((npy_half *)ip2));
    }
    *((npy_half *)op) = npy_float_to_half(tmp);
}

/**begin repeat
 *
 * #name = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = float, double, longdouble#
 */
static void @name@_dot(char *ip1, intp is1, char *ip2, intp is2,
                       char *op, intp n, void *NPY_UNUSED(ignore))
{
    @type@ tmpr = (@type@)0.0, tmpi=(@type@)0.0;
    intp i;

    for (i = 0; i < n; i++, ip1 += is1, ip2 += is2) {
        tmpr += ((@type@ *)ip1)[0] * ((@type@ *)ip2)[0]
                - ((@type@ *)ip1)[1] * ((@type@ *)ip2)[1];
        tmpi += ((@type@ *)ip1)[1] * ((@type@ *)ip2)[0]
                + ((@type@ *)ip1)[0] * ((@type@ *)ip2)[1];
    }
    ((@type@ *)op)[0] = tmpr; ((@type@ *)op)[1] = tmpi;
}

/**end repeat**/

static void
OBJECT_dot(char *ip1, intp is1, char *ip2, intp is2, char *op, intp n,
           void *NPY_UNUSED(ignore))
{
    /*
     * ALIGNMENT NOTE: np.dot, np.inner etc. enforce that the array is
     * BEHAVED before getting to this point, so unaligned pointers aren't
     * handled here.
     */
    intp i;
    PyObject *tmp1, *tmp2, *tmp = NULL;
    PyObject **tmp3;
    for (i = 0; i < n; i++, ip1 += is1, ip2 += is2) {
        if ((*((PyObject **)ip1) == NULL) || (*((PyObject **)ip2) == NULL)) {
            tmp1 = Py_False;
            Py_INCREF(Py_False);
        }
        else {
            tmp1 = PyNumber_Multiply(*((PyObject **)ip1), *((PyObject **)ip2));
            if (!tmp1) {
                Py_XDECREF(tmp);
                return;
            }
        }
        if (i == 0) {
            tmp = tmp1;
        }
        else {
            tmp2 = PyNumber_Add(tmp, tmp1);
            Py_XDECREF(tmp);
            Py_XDECREF(tmp1);
            if (!tmp2) {
                return;
            }
            tmp = tmp2;
        }
    }
    tmp3 = (PyObject**) op;
    tmp2 = *tmp3;
    *((PyObject **)op) = tmp;
    Py_XDECREF(tmp2);
}


/*
 *****************************************************************************
 **                                 FILL                                    **
 *****************************************************************************
 */


#define BOOL_fill NULL

/* this requires buffer to be filled with objects or NULL */
static void
OBJECT_fill(PyObject **buffer, intp length, void *NPY_UNUSED(ignored))
{
    intp i;
    PyObject *start = buffer[0];
    PyObject *delta = buffer[1];

    delta = PyNumber_Subtract(delta, start);
    if (!delta) {
        return;
    }
    start = PyNumber_Add(start, delta);
    if (!start) {
        goto finish;
    }
    buffer += 2;

    for (i = 2; i < length; i++, buffer++) {
        start = PyNumber_Add(start, delta);
        if (!start) {
            goto finish;
        }
        Py_XDECREF(*buffer);
        *buffer = start;
    }

finish:
    Py_DECREF(delta);
    return;
}

/**begin repeat
 *
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE,
 *         DATETIME, TIMEDELTA#
 * #typ =  byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, float, double, longdouble,
 *         datetime, timedelta#
*/
static void
@NAME@_fill(@typ@ *buffer, intp length, void *NPY_UNUSED(ignored))
{
    intp i;
    @typ@ start = buffer[0];
    @typ@ delta = buffer[1];

    delta -= start;
    for (i = 2; i < length; ++i) {
        buffer[i] = start + i*delta;
    }
}
/**end repeat**/

static void
HALF_fill(npy_half *buffer, npy_intp length, void *NPY_UNUSED(ignored))
{
    npy_intp i;
    float start = npy_half_to_float(buffer[0]);
    float delta = npy_half_to_float(buffer[1]);

    delta -= start;
    for (i = 2; i < length; ++i) {
        buffer[i] = npy_float_to_half(start + i*delta);
    }
}

/**begin repeat
 *
 * #NAME = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #typ = cfloat, cdouble, clongdouble#
*/
static void
@NAME@_fill(@typ@ *buffer, intp length, void *NPY_UNUSED(ignore))
{
    intp i;
    @typ@ start;
    @typ@ delta;

    start.real = buffer->real;
    start.imag = buffer->imag;
    delta.real = buffer[1].real;
    delta.imag = buffer[1].imag;
    delta.real -= start.real;
    delta.imag -= start.imag;
    buffer += 2;
    for (i = 2; i < length; i++, buffer++) {
        buffer->real = start.real + i*delta.real;
        buffer->imag = start.imag + i*delta.imag;
    }
}
/**end repeat**/


/* this requires buffer to be filled with objects or NULL */
static void
OBJECT_fillwithscalar(PyObject **buffer, intp length, PyObject **value, void *NPY_UNUSED(ignored))
{
    intp i;
    PyObject *val = *value;
    for (i = 0; i < length; i++) {
        Py_XDECREF(buffer[i]);
        Py_XINCREF(val);
        buffer[i] = val;
    }
}
/**begin repeat
 *
 * #NAME = BOOL, BYTE, UBYTE#
 * #typ = Bool, byte, ubyte#
 */
static void
@NAME@_fillwithscalar(@typ@ *buffer, intp length, @typ@ *value, void *NPY_UNUSED(ignored))
{
    memset(buffer, *value, length);
}
/**end repeat**/

/**begin repeat
 *
 * #NAME = SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE, CLONGDOUBLE,
 *         DATETIME, TIMEDELTA#
 * #typ = short, ushort, int, uint, long, ulong, longlong, ulonglong,
 *        npy_half, float, double, longdouble, cfloat, cdouble, clongdouble,
 *        datetime, timedelta#
 */
static void
@NAME@_fillwithscalar(@typ@ *buffer, intp length, @typ@ *value, void *NPY_UNUSED(ignored))
{
    intp i;
    @typ@ val = *value;

    for (i = 0; i < length; ++i) {
        buffer[i] = val;
    }
}
/**end repeat**/


/*
 *****************************************************************************
 **                               FASTCLIP                                  **
 *****************************************************************************
 */

#define _LESS_THAN(a, b) ((a) < (b))
#define _GREATER_THAN(a, b) ((a) > (b))
/*
 * In fastclip, 'b' was already checked for NaN, so the half comparison
 * only needs to check 'a' for NaN.
 */
#define _HALF_LESS_THAN(a, b) (!npy_half_isnan(a) && npy_half_lt_nonan(a, b))
#define _HALF_GREATER_THAN(a, b) (!npy_half_isnan(a) && npy_half_lt_nonan(b, a))

/**begin repeat
 *
 * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         datetime, timedelta#
 * #isfloat = 0*11, 1*4, 0*2#
 * #isnan = nop*11, npy_half_isnan, npy_isnan*3, nop*2#
 * #lt = _LESS_THAN*11, _HALF_LESS_THAN, _LESS_THAN*5#
 * #gt = _GREATER_THAN*11, _HALF_GREATER_THAN, _GREATER_THAN*5#
 */
static void
@name@_fastclip(@type@ *in, intp ni, @type@ *min, @type@ *max, @type@ *out)
{
    npy_intp i;
    @type@ max_val = 0, min_val = 0;

    if (max != NULL) {
        max_val = *max;
#if @isfloat@
        /* NaNs result in no clipping, so optimize the case away */
        if (@isnan@(max_val)) {
            if (min == NULL) {
                return;
            }
            max = NULL;
        }
#endif
    }
    if (min != NULL) {
        min_val = *min;
#if @isfloat@
        if (@isnan@(min_val)) {
            if (max == NULL) {
                return;
            }
            min = NULL;
        }
#endif
    }
    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (@lt@(in[i], min_val)) {
                out[i] = min_val;
            }
        }
    }
    else if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (@gt@(in[i], max_val)) {
                out[i] = max_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (@lt@(in[i], min_val)) {
                out[i]   = min_val;
            }
            else if (@gt@(in[i], max_val)) {
                out[i]   = max_val;
            }
        }
    }
}
/**end repeat**/

#undef _LESS_THAN
#undef _GREATER_THAN
#undef _HALF_LESS_THAN
#undef _HALF_GREATER_THAN

/**begin repeat
 *
 * #name = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = cfloat, cdouble, clongdouble#
 */
static void
@name@_fastclip(@type@ *in, intp ni, @type@ *min, @type@ *max, @type@ *out)
{
    npy_intp i;
    @type@ max_val, min_val;

    min_val = *min;
    max_val = *max;
    if (max != NULL) {
        max_val = *max;
    }
    if (min != NULL) {
        min_val = *min;
    }
    if (max == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CLT(in[i],min_val)) {
                out[i] = min_val;
            }
        }
    }
    else if (min == NULL) {
        for (i = 0; i < ni; i++) {
            if (PyArray_CGT(in[i], max_val)) {
                out[i] = max_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (PyArray_CLT(in[i], min_val)) {
                out[i] = min_val;
            }
            else if (PyArray_CGT(in[i], max_val)) {
                out[i] = max_val;
            }
        }
    }
}

/**end repeat**/

#define OBJECT_fastclip NULL


/*
 *****************************************************************************
 **                              FASTPUTMASK                                **
 *****************************************************************************
 */


/**begin repeat
 *
 * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble, datetime, timedelta#
*/
static void
@name@_fastputmask(@type@ *in, Bool *mask, intp ni, @type@ *vals, intp nv)
{
    npy_intp i;
    @type@ s_val;

    if (nv == 1) {
        s_val = *vals;
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = s_val;
            }
        }
    }
    else {
        for (i = 0; i < ni; i++) {
            if (mask[i]) {
                in[i] = vals[i%nv];
            }
        }
    }
    return;
}
/**end repeat**/

#define OBJECT_fastputmask NULL


/*
 *****************************************************************************
 **                                FASTTAKE                                 **
 *****************************************************************************
 */


/**begin repeat
 *
 * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, npy_half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble, datetime, timedelta#
*/
static int
@name@_fasttake(@type@ *dest, @type@ *src, intp *indarray,
                    intp nindarray, intp n_outer,
                    intp m_middle, intp nelem,
                    NPY_CLIPMODE clipmode)
{
    intp i, j, k, tmp;

    switch(clipmode) {
    case NPY_RAISE:
        for (i = 0; i < n_outer; i++) {
            for (j = 0; j < m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) {
                    tmp = tmp+nindarray;
                }
                if ((tmp < 0) || (tmp >= nindarray)) {
                    PyErr_SetString(PyExc_IndexError,
                                    "index out of range for array");
                    return 1;
                }
                if (nelem == 1) {
                    *dest++ = *(src+tmp);
                }
                else {
                    for (k = 0; k < nelem; k++) {
                        *dest++ = *(src + tmp*nelem + k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_WRAP:
        for (i = 0; i < n_outer; i++) {
            for (j = 0; j < m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) {
                    while (tmp < 0) {
                        tmp += nindarray;
                    }
                }
                else if (tmp >= nindarray) {
                    while (tmp >= nindarray) {
                        tmp -= nindarray;
                    }
                }
                if (nelem == 1) {
                    *dest++ = *(src+tmp);
                }
                else {
                    for (k = 0; k < nelem; k++) {
                        *dest++ = *(src+tmp*nelem+k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    case NPY_CLIP:
        for (i = 0; i < n_outer; i++) {
            for (j = 0; j < m_middle; j++) {
                tmp = indarray[j];
                if (tmp < 0) {
                    tmp = 0;
                }
                else if (tmp >= nindarray) {
                    tmp = nindarray - 1;
                }
                if (nelem == 1) {
                    *dest++ = *(src+tmp);
                }
                else {
                    for (k = 0; k < nelem; k++) {
                        *dest++ = *(src + tmp*nelem + k);
                    }
                }
            }
            src += nelem*nindarray;
        }
        break;
    }
    return 0;
}
/**end repeat**/

#define OBJECT_fasttake NULL


/*
 *****************************************************************************
 **                       SETUP FUNCTION POINTERS                           **
 *****************************************************************************
 */


#define _ALIGN(type) offsetof(struct {char c; type v;}, v)
/*
 * Disable harmless compiler warning "4116: unnamed type definition in
 * parentheses" which is caused by the _ALIGN macro.
 */
#if defined(_MSC_VER)
#pragma warning(disable:4116)
#endif


/**begin repeat
 *
 * #from = VOID, STRING, UNICODE#
 * #align = char, char, PyArray_UCS4#
 * #NAME = Void, String, Unicode#
 * #endian = |, |, =#
*/
static PyArray_ArrFuncs _Py@NAME@_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)@from@_to_BOOL,
        (PyArray_VectorUnaryFunc*)@from@_to_BYTE,
        (PyArray_VectorUnaryFunc*)@from@_to_UBYTE,
        (PyArray_VectorUnaryFunc*)@from@_to_SHORT,
        (PyArray_VectorUnaryFunc*)@from@_to_USHORT,
        (PyArray_VectorUnaryFunc*)@from@_to_INT,
        (PyArray_VectorUnaryFunc*)@from@_to_UINT,
        (PyArray_VectorUnaryFunc*)@from@_to_LONG,
        (PyArray_VectorUnaryFunc*)@from@_to_ULONG,
        (PyArray_VectorUnaryFunc*)@from@_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)@from@_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)@from@_to_FLOAT,
        (PyArray_VectorUnaryFunc*)@from@_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)@from@_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_OBJECT,
        (PyArray_VectorUnaryFunc*)@from@_to_STRING,
        (PyArray_VectorUnaryFunc*)@from@_to_UNICODE,
        (PyArray_VectorUnaryFunc*)@from@_to_VOID
    },
    (PyArray_GetItemFunc*)@from@_getitem,
    (PyArray_SetItemFunc*)@from@_setitem,
    (PyArray_CopySwapNFunc*)@from@_copyswapn,
    (PyArray_CopySwapFunc*)@from@_copyswap,
    (PyArray_CompareFunc*)@from@_compare,
    (PyArray_ArgFunc*)@from@_argmax,
    (PyArray_DotFunc*)NULL,
    (PyArray_ScanFunc*)@from@_scan,
    (PyArray_FromStrFunc*)@from@_fromstr,
    (PyArray_NonzeroFunc*)@from@_nonzero,
    (PyArray_FillFunc*)NULL,
    (PyArray_FillWithScalarFunc*)NULL,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc *)NULL,
    (PyArray_FastPutmaskFunc *)NULL,
    (PyArray_FastTakeFunc *)NULL,
    (PyArray_ArgFunc*)@from@_argmin
};

/*
 * FIXME: check for PY3K
 */
static PyArray_Descr @from@_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
    &Py@NAME@ArrType_Type,
    PyArray_@from@LTR,
    PyArray_@from@LTR,
    '@endian@',
    0,
    PyArray_@from@,
    0,
    _ALIGN(@align@),
    NULL,
    NULL,
    NULL,
    &_Py@NAME@_ArrFuncs,
    NULL,
};

/**end repeat**/

/**begin repeat
 *
 * #from = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, DATETIME, TIMEDELTA#
 * #num = 1*15, 2*3, 1*3#
 * #fromtyp = Bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *            longlong, ulonglong, npy_half, float, double, longdouble,
 *            float, double, longdouble, PyObject *, datetime, timedelta#
 * #NAME = Bool, Byte, UByte, Short, UShort, Int, UInt, Long, ULong,
 *         LongLong, ULongLong, Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble, Object, Datetime, Timedelta#
 * #kind = GENBOOL, SIGNED, UNSIGNED, SIGNED, UNSIGNED, SIGNED, UNSIGNED, SIGNED, UNSIGNED,
 *         SIGNED, UNSIGNED, FLOATING, FLOATING, FLOATING, FLOATING,
 *         COMPLEX, COMPLEX, COMPLEX, OBJECT, DATETIME, TIMEDELTA#
 * #endian = |*3, =*15, |, =*2#
 * #isobject= 0*18,NPY_OBJECT_DTYPE_FLAGS,0*2#
 */
static PyArray_ArrFuncs _Py@NAME@_ArrFuncs = {
    {
        (PyArray_VectorUnaryFunc*)@from@_to_BOOL,
        (PyArray_VectorUnaryFunc*)@from@_to_BYTE,
        (PyArray_VectorUnaryFunc*)@from@_to_UBYTE,
        (PyArray_VectorUnaryFunc*)@from@_to_SHORT,
        (PyArray_VectorUnaryFunc*)@from@_to_USHORT,
        (PyArray_VectorUnaryFunc*)@from@_to_INT,
        (PyArray_VectorUnaryFunc*)@from@_to_UINT,
        (PyArray_VectorUnaryFunc*)@from@_to_LONG,
        (PyArray_VectorUnaryFunc*)@from@_to_ULONG,
        (PyArray_VectorUnaryFunc*)@from@_to_LONGLONG,
        (PyArray_VectorUnaryFunc*)@from@_to_ULONGLONG,
        (PyArray_VectorUnaryFunc*)@from@_to_FLOAT,
        (PyArray_VectorUnaryFunc*)@from@_to_DOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_LONGDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_CFLOAT,
        (PyArray_VectorUnaryFunc*)@from@_to_CDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_CLONGDOUBLE,
        (PyArray_VectorUnaryFunc*)@from@_to_OBJECT,
        (PyArray_VectorUnaryFunc*)@from@_to_STRING,
        (PyArray_VectorUnaryFunc*)@from@_to_UNICODE,
        (PyArray_VectorUnaryFunc*)@from@_to_VOID
    },
    (PyArray_GetItemFunc*)@from@_getitem,
    (PyArray_SetItemFunc*)@from@_setitem,
    (PyArray_CopySwapNFunc*)@from@_copyswapn,
    (PyArray_CopySwapFunc*)@from@_copyswap,
    (PyArray_CompareFunc*)@from@_compare,
    (PyArray_ArgFunc*)@from@_argmax,
    (PyArray_DotFunc*)@from@_dot,
    (PyArray_ScanFunc*)@from@_scan,
    (PyArray_FromStrFunc*)@from@_fromstr,
    (PyArray_NonzeroFunc*)@from@_nonzero,
    (PyArray_FillFunc*)@from@_fill,
    (PyArray_FillWithScalarFunc*)@from@_fillwithscalar,
    {
        NULL, NULL, NULL
    },
    {
        NULL, NULL, NULL
    },
    NULL,
    (PyArray_ScalarKindFunc*)NULL,
    NULL,
    NULL,
    (PyArray_FastClipFunc*)@from@_fastclip,
    (PyArray_FastPutmaskFunc*)@from@_fastputmask,
    (PyArray_FastTakeFunc*)@from@_fasttake,
    (PyArray_ArgFunc*)@from@_argmin
};

/*
 * FIXME: check for PY3K
 */
NPY_NO_EXPORT PyArray_Descr @from@_Descr = {
    PyObject_HEAD_INIT(&PyArrayDescr_Type)
    &Py@NAME@ArrType_Type,
    PyArray_@kind@LTR,
    PyArray_@from@LTR,
    '@endian@',
    @isobject@,
    PyArray_@from@,
    @num@*sizeof(@fromtyp@),
    _ALIGN(@fromtyp@),
    NULL,
    NULL,
    NULL,
    &_Py@NAME@_ArrFuncs,
    NULL,
};

/**end repeat**/

static void
_init_datetime_descr(PyArray_Descr *descr)
{
    PyArray_DatetimeMetaData *dt_data;
    PyObject *cobj;

    dt_data = _pya_malloc(sizeof(PyArray_DatetimeMetaData));
    dt_data->base = NPY_FR_us;
    dt_data->num = 1;
    dt_data->den = 1;
    dt_data->events = 1;

/* FIXME
 * There is no error check here and no way to indicate an error
 * until the metadata turns up NULL.
 */
    cobj = NpyCapsule_FromVoidPtr((void *)dt_data, simple_capsule_dtor);
    descr->metadata = PyDict_New();
    PyDict_SetItemString(descr->metadata, NPY_METADATA_DTSTR, cobj);
    Py_DECREF(cobj);

}

#define _MAX_LETTER 128
static char _letter_to_num[_MAX_LETTER];

static PyArray_Descr *_builtin_descrs[] = {
    &BOOL_Descr,
    &BYTE_Descr,
    &UBYTE_Descr,
    &SHORT_Descr,
    &USHORT_Descr,
    &INT_Descr,
    &UINT_Descr,
    &LONG_Descr,
    &ULONG_Descr,
    &LONGLONG_Descr,
    &ULONGLONG_Descr,
    &FLOAT_Descr,
    &DOUBLE_Descr,
    &LONGDOUBLE_Descr,
    &CFLOAT_Descr,
    &CDOUBLE_Descr,
    &CLONGDOUBLE_Descr,
    &OBJECT_Descr,
    &STRING_Descr,
    &UNICODE_Descr,
    &VOID_Descr,
    &DATETIME_Descr,
    &TIMEDELTA_Descr,
    &HALF_Descr
};

/*NUMPY_API
 * Get the PyArray_Descr structure for a type.
 */
NPY_NO_EXPORT PyArray_Descr *
PyArray_DescrFromType(int type)
{
    PyArray_Descr *ret = NULL;

    if (type < PyArray_NTYPES) {
        ret = _builtin_descrs[type];
    }
    else if (type == PyArray_NOTYPE) {
        /*
         * This needs to not raise an error so
         * that PyArray_DescrFromType(PyArray_NOTYPE)
         * works for backwards-compatible C-API
         */
        return NULL;
    }
    else if ((type == PyArray_CHAR) || (type == PyArray_CHARLTR)) {
        ret = PyArray_DescrNew(_builtin_descrs[PyArray_STRING]);
        if (ret == NULL) {
            return NULL;
        }
        ret->elsize = 1;
        ret->type = PyArray_CHARLTR;
        return ret;
    }
    else if (PyTypeNum_ISUSERDEF(type)) {
        ret = userdescrs[type - PyArray_USERDEF];
    }
    else {
        int num = PyArray_NTYPES;
        if (type < _MAX_LETTER) {
            num = (int) _letter_to_num[type];
        }
        if (num >= PyArray_NTYPES) {
            ret = NULL;
        }
        else {
            ret = _builtin_descrs[num];
        }
    }
    if (ret == NULL) {
        PyErr_SetString(PyExc_ValueError,
                "Invalid data-type for array");
    }
    else {
        Py_INCREF(ret);
    }

    /* Make sure dtype metadata is initialized for DATETIME */
    if (PyTypeNum_ISDATETIME(type)) {
        if (ret->metadata == NULL) {
            _init_datetime_descr(ret);
        }
    }

    return ret;
}


/*
 *****************************************************************************
 **                             SETUP TYPE INFO                             **
 *****************************************************************************
 */


NPY_NO_EXPORT int
set_typeinfo(PyObject *dict)
{
    PyObject *infodict, *s;
    int i;

    PyArray_Descr *dtype;
    PyObject *cobj, *key;

    /* Add cast functions for the new types */
/**begin repeat
 *
 * #name1 = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *         LONG, ULONG, LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, STRING, UNICODE, VOID,
 *         DATETIME,TIMEDELTA#
 */
/**begin repeat1
 *
 * #name2 = HALF, DATETIME, TIMEDELTA#
 */
    dtype = _builtin_descrs[NPY_@name1@];
    if (dtype->f->castdict == NULL) {
        dtype->f->castdict = PyDict_New();
        if (dtype->f->castdict == NULL) {
            return -1;
        }
    }
    key = PyInt_FromLong(NPY_@name2@);
    if (key == NULL) {
        return -1;
    }
    cobj = NpyCapsule_FromVoidPtr((void *)@name1@_to_@name2@, NULL);
    if (cobj == NULL) {
        Py_DECREF(key);
        return -1;
    }
    if (PyDict_SetItem(dtype->f->castdict, key, cobj) < 0) {
        Py_DECREF(key);
        Py_DECREF(cobj);
        return -1;
    }
    Py_DECREF(key);
    Py_DECREF(cobj);
/**end repeat1**/
/**end repeat**/

    for (i = 0; i < _MAX_LETTER; i++) {
        _letter_to_num[i] = NPY_NTYPES;
    }

/**begin repeat
 *
 * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, INTP, UINTP,
 *         LONG, ULONG, LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, STRING, UNICODE, VOID,
 *         DATETIME,TIMEDELTA#
 */
    _letter_to_num[PyArray_@name@LTR] = PyArray_@name@;
/**end repeat**/
    _letter_to_num[PyArray_STRINGLTR2] = PyArray_STRING;

/**begin repeat
  * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT,
  *         LONG, ULONG, LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
  *         CFLOAT, CDOUBLE, CLONGDOUBLE, OBJECT, STRING, UNICODE, VOID,
  *         DATETIME, TIMEDELTA#
*/
    @name@_Descr.fields = Py_None;
/**end repeat**/

    /* Set a dictionary with type information */
    infodict = PyDict_New();
    if (infodict == NULL) return -1;

#define BITSOF_INTP CHAR_BIT*SIZEOF_PY_INTPTR_T
#define BITSOF_BYTE CHAR_BIT

/**begin repeat
 *
 * #name = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, INTP, UINTP,
 *         LONG, ULONG, LONGLONG, ULONGLONG#
 * #uname = BOOL, BYTE*2, SHORT*2, INT*2, INTP*2, LONG*2, LONGLONG*2#
 * #Name = Bool, Byte, UByte, Short, UShort, Int, UInt, Intp, UIntp,
 *         Long, ULong, LongLong, ULongLong#
 * #type = Bool, byte, ubyte, short, ushort, int, uint, intp, uintp,
 *         long, ulong, longlong, ulonglong#
 * #max= 1, MAX_BYTE, MAX_UBYTE, MAX_SHORT, MAX_USHORT, MAX_INT,
 *       PyLong_FromUnsignedLong(MAX_UINT), PyLong_FromLongLong((longlong) MAX_INTP),
 *       PyLong_FromUnsignedLongLong((ulonglong) MAX_UINTP), MAX_LONG,
 *       PyLong_FromUnsignedLong((unsigned long) MAX_ULONG),
 *       PyLong_FromLongLong((longlong) MAX_LONGLONG),
 *       PyLong_FromUnsignedLongLong((ulonglong) MAX_ULONGLONG)#
 * #min = 0, MIN_BYTE, 0, MIN_SHORT, 0, MIN_INT, 0,
 *        PyLong_FromLongLong((longlong) MIN_INTP), 0, MIN_LONG, 0,
 *        PyLong_FromLongLong((longlong) MIN_LONGLONG),0#
 * #cx = i*6, N, N, N, l, N, N, N#
 * #cn = i*7, N, i, l, i, N, i#
*/
    PyDict_SetItemString(infodict, "@name@",
#if defined(NPY_PY3K)
            s = Py_BuildValue("Ciii@cx@@cn@O",
#else
            s = Py_BuildValue("ciii@cx@@cn@O",
#endif
                PyArray_@name@LTR,
                PyArray_@name@,
                BITSOF_@uname@,
                _ALIGN(@type@),
                @max@,
                @min@,
                (PyObject *) &Py@Name@ArrType_Type));
    Py_DECREF(s);
/**end repeat**/

#define BITSOF_CFLOAT 2*BITSOF_FLOAT
#define BITSOF_CDOUBLE 2*BITSOF_DOUBLE
#define BITSOF_CLONGDOUBLE 2*BITSOF_LONGDOUBLE

/**begin repeat
 *
 * #type = npy_half, float, double, longdouble, cfloat, cdouble, clongdouble#
 * #name = HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #Name = Half, Float, Double, LongDouble, CFloat, CDouble, CLongDouble#
 */
    PyDict_SetItemString(infodict, "@name@",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiO", PyArray_@name@LTR,
#else
            s = Py_BuildValue("ciiiO", PyArray_@name@LTR,
#endif
                PyArray_@name@,
                BITSOF_@name@,
                _ALIGN(@type@),
                (PyObject *) &Py@Name@ArrType_Type));
    Py_DECREF(s);
/**end repeat**/

    PyDict_SetItemString(infodict, "OBJECT",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiO", PyArray_OBJECTLTR,
#else
            s = Py_BuildValue("ciiiO", PyArray_OBJECTLTR,
#endif
                PyArray_OBJECT,
                sizeof(PyObject *) * CHAR_BIT,
                _ALIGN(PyObject *),
                (PyObject *) &PyObjectArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "STRING",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiO", PyArray_STRINGLTR,
#else
            s = Py_BuildValue("ciiiO", PyArray_STRINGLTR,
#endif
                PyArray_STRING,
                0,
                _ALIGN(char),
                (PyObject *) &PyStringArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "UNICODE",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiO", PyArray_UNICODELTR,
#else
            s = Py_BuildValue("ciiiO", PyArray_UNICODELTR,
#endif
                PyArray_UNICODE,
                0,
                _ALIGN(PyArray_UCS4),
                (PyObject *) &PyUnicodeArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "VOID",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiO", PyArray_VOIDLTR,
#else
            s = Py_BuildValue("ciiiO", PyArray_VOIDLTR,
#endif
                PyArray_VOID,
                0,
                _ALIGN(char),
                (PyObject *) &PyVoidArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "DATETIME",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiNNO", PyArray_DATETIMELTR,
#else
            s = Py_BuildValue("ciiiNNO", PyArray_DATETIMELTR,
#endif
                PyArray_DATETIME,
                sizeof(npy_datetime) * CHAR_BIT,
                _ALIGN(npy_datetime),
                MyPyLong_FromInt64(MAX_DATETIME),
                MyPyLong_FromInt64(MIN_DATETIME),
                (PyObject *) &PyDatetimeArrType_Type));
    Py_DECREF(s);
    PyDict_SetItemString(infodict, "TIMEDELTA",
#if defined(NPY_PY3K)
            s = Py_BuildValue("CiiiNNO", PyArray_TIMEDELTALTR,
#else
            s = Py_BuildValue("ciiiNNO",PyArray_TIMEDELTALTR,
#endif
                PyArray_TIMEDELTA,
                sizeof(npy_timedelta) * CHAR_BIT,
                _ALIGN(npy_timedelta),
                MyPyLong_FromInt64(MAX_TIMEDELTA),
                MyPyLong_FromInt64(MIN_TIMEDELTA),
                (PyObject *)&PyTimedeltaArrType_Type));
    Py_DECREF(s);

#define SETTYPE(name)                           \
    Py_INCREF(&Py##name##ArrType_Type);         \
    PyDict_SetItemString(infodict, #name,       \
            (PyObject *)&Py##name##ArrType_Type)

    SETTYPE(Generic);
    SETTYPE(Number);
    SETTYPE(Integer);
    SETTYPE(Inexact);
    SETTYPE(SignedInteger);
    SETTYPE(TimeInteger);
    SETTYPE(UnsignedInteger);
    SETTYPE(Floating);
    SETTYPE(ComplexFloating);
    SETTYPE(Flexible);
    SETTYPE(Character);

#undef SETTYPE

    PyDict_SetItemString(dict, "typeinfo", infodict);
    Py_DECREF(infodict);
    return 0;
}

#undef _MAX_LETTER
